Project Folder Structure:

C:\vs_code\ocp-bank-poc\src\App.css
C:\vs_code\ocp-bank-poc\src\App.tsx
C:\vs_code\ocp-bank-poc\src\components\forms\SoilAnalysisForm.tsx
C:\vs_code\ocp-bank-poc\src\components\home\Benefits.tsx
C:\vs_code\ocp-bank-poc\src\components\home\CallToAction.tsx
C:\vs_code\ocp-bank-poc\src\components\home\Hero.tsx
C:\vs_code\ocp-bank-poc\src\components\layout\Layout.tsx
C:\vs_code\ocp-bank-poc\src\components\SupabaseTest.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\alert.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\button.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\card.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\input.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\label.tsx
C:\vs_code\ocp-bank-poc\src\components\ui\select.tsx
C:\vs_code\ocp-bank-poc\src\constants\config.ts
C:\vs_code\ocp-bank-poc\src\hooks\useSoilAnalysis.ts
C:\vs_code\ocp-bank-poc\src\index.css
C:\vs_code\ocp-bank-poc\src\lib\utils.ts
C:\vs_code\ocp-bank-poc\src\main.tsx
C:\vs_code\ocp-bank-poc\src\pages\Home.tsx
C:\vs_code\ocp-bank-poc\src\pages\RequestAnalysis.tsx
C:\vs_code\ocp-bank-poc\src\pages\RequestSuccess.tsx
C:\vs_code\ocp-bank-poc\src\services\mockApi.ts
C:\vs_code\ocp-bank-poc\src\services\supabase.ts
C:\vs_code\ocp-bank-poc\src\styles\globals.css
C:\vs_code\ocp-bank-poc\src\types\analysis.ts
C:\vs_code\ocp-bank-poc\src\utils\dateUtils.ts
C:\vs_code\ocp-bank-poc\src\utils\validation.ts
C:\vs_code\ocp-bank-poc\src\vite-env.d.ts
C:\vs_code\ocp-bank-poc\vite.config.d.ts
C:\vs_code\ocp-bank-poc\vite.config.ts

==== File Contents ====



==== C:\vs_code\ocp-bank-poc\src\App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}




==== C:\vs_code\ocp-bank-poc\src\App.tsx ====

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Layout from './components/layout/Layout';
import Home from './pages/Home';
import RequestAnalysis from './pages/RequestAnalysis';
import AnalysisConfirmation from './pages/RequestSuccess'; // Add this import

function App() {
  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/request-analysis" element={<RequestAnalysis />} />
          <Route path="/analysis-confirmation" element={<AnalysisConfirmation />} />
        </Routes>
      </Layout>
    </Router>
  );
}

export default App;



==== C:\vs_code\ocp-bank-poc\src\components\forms\SoilAnalysisForm.tsx ====

import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Card, CardHeader, CardTitle, CardContent } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Label } from '../ui/label';
import { Alert, AlertDescription } from '../ui/alert';
import { SoilAnalysisRequest, CropType } from '../../types/analysis';
import { supabase } from '../../services/supabase';
import { useNavigate } from 'react-router-dom';

const cropTypes: CropType[] = ['corn', 'wheat', 'soybeans', 'cotton', 'rice'];

const phoneRegex = /^\+?[1-9]\d{1,14}$/;

const formSchema = z.object({
  cropType: z.enum(['corn', 'wheat', 'soybeans', 'cotton', 'rice'] as const),
  farmerName: z.string().min(2, 'Name must be at least 2 characters'),
  farmAddress: z.string().min(5, 'Please enter a valid address'),
  phoneNumber: z.string().regex(phoneRegex, 'Please enter a valid phone number'),
  email: z.string().email('Please enter a valid email address'),
  acreage: z.number().min(1, 'Acreage must be greater than 0'),
  preferredSamplingDate: z.date().min(new Date(), 'Date must be in the future'),
  notes: z.string().optional(),
});

const SoilAnalysisForm = () => {
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [submitError, setSubmitError] = React.useState<string | null>(null);
  const [submitSuccess] = React.useState(false);
  const navigate = useNavigate();

  const {
    register,
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<SoilAnalysisRequest>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = async (data: SoilAnalysisRequest) => {
    setIsSubmitting(true);
    setSubmitError(null);
    try {
      const { error } = await supabase
        .from('soil_analysis_requests')
        .insert([
          {
            crop_type: data.cropType,
            email: data.email,
            address: data.farmAddress,
            farmer_name: data.farmerName,
            phone: data.phoneNumber,
            status: 'pending',
            acreage: data.acreage,
            notes: data.notes,
            preferred_date: data.preferredSamplingDate.toISOString(),
            created_at: new Date().toISOString(),
          },
        ]);

      if (error) throw error;

      // Navigate to confirmation page with form data
      navigate('/analysis-confirmation', { state: { formData: data } });
    } catch (error) {
      setSubmitError('Failed to submit request. Please try again.');
      console.error('Submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto overflow-visible">
      <CardHeader>
        <CardTitle>Request Soil Analysis</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        <div className="space-y-2">
            <Label htmlFor="cropType">Crop Type</Label>
            <Controller
                name="cropType"
                control={control}
                render={({ field }) => (
                <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger>
                    <SelectValue placeholder="Select crop type" />
                    </SelectTrigger>
                    <SelectContent>
                    {cropTypes.map((crop) => (
                        <SelectItem key={crop} value={crop}>
                        {crop.charAt(0).toUpperCase() + crop.slice(1)}
                        </SelectItem>
                    ))}
                    </SelectContent>
                </Select>
                )}
            />
            {errors.cropType && (
                <p className="text-sm text-red-500">{errors.cropType.message}</p>
            )}
            </div>

          <div className="space-y-2">
            <Label htmlFor="farmerName">Full Name</Label>
            <Input
              {...register('farmerName')}
              placeholder="John Doe" defaultValue="Bank" 
            />
            {errors.farmerName && (
              <p className="text-sm text-red-500">{errors.farmerName.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="farmAddress">Farm Address</Label>
            <Input
              {...register('farmAddress')}
              placeholder="1234 Farm Road, City, State, ZIP" defaultValue="Asgrad" 
            />
            {errors.farmAddress && (
              <p className="text-sm text-red-500">{errors.farmAddress.message}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="phoneNumber">Phone Number</Label>
              <Input
                {...register('phoneNumber')}
                placeholder="+1234567890" defaultValue="+66981519392" 
              />
              {errors.phoneNumber && (
                <p className="text-sm text-red-500">{errors.phoneNumber.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                {...register('email')}
                type="email"
                placeholder="farmer@example.com" defaultValue="bankp@hotmail.com" 
              />
              {errors.email && (
                <p className="text-sm text-red-500">{errors.email.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="acreage">Acreage</Label>
              <Input
                {...register('acreage', { valueAsNumber: true })}
                type="number"
                min="1"
                placeholder="100" defaultValue="1" 
              />
              {errors.acreage && (
                <p className="text-sm text-red-500">{errors.acreage.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="preferredSamplingDate">Preferred Sampling Date</Label>
              <Input
                {...register('preferredSamplingDate', { valueAsDate: true })}
                type="date"
                min={new Date().toISOString().split('T')[0]}
              />
              {errors.preferredSamplingDate && (
                <p className="text-sm text-red-500">{errors.preferredSamplingDate.message}</p>
              )}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes">Additional Notes (Optional)</Label>
            <Input
              {...register('notes')}
              placeholder="Any special instructions or requirements"
            />
          </div>

          {submitError && (
            // <Alert variant="destructive">
            <Alert>
              <AlertDescription>{submitError}</AlertDescription>
            </Alert>
          )}

          {submitSuccess && (
            <Alert className="bg-green-50">
              <AlertDescription>
                Your soil analysis request has been submitted successfully! We'll contact you to confirm the sampling date.
              </AlertDescription>
            </Alert>
          )}

          <Button
            type="submit"
            className="w-full"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Submitting...' : 'Submit Request'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
};

export default SoilAnalysisForm;



==== C:\vs_code\ocp-bank-poc\src\components\home\Benefits.tsx ====

// src/components/home/Benefits.tsx
import React from 'react';

const Benefits: React.FC = () => (
  <section className="py-20">
    <div className="max-w-7xl mx-auto">
      {/* Learn More Section */}
      <div className="mb-20 flex items-center bg-white">
        <div className="w-1/2 px-12">
          <h2 className="text-3xl font-bold text-gray-800 mb-6">Learn More</h2>
          <p className="text-gray-600 text-lg leading-relaxed">
            Discover how our custom fertilizer solutions can transform your farming practices. 
            Our advanced soil analysis technology provides precise recommendations for optimal crop growth.
          </p>
        </div>
        <div className="w-1/2">
          <img src="/images/learn-more.jpg" alt="Learn More" className="w-full h-96 object-cover" />
        </div>
      </div>

      {/* Who We Are Section */}
      <div className="mb-20 flex items-center bg-gray-50">
        <div className="w-1/2">
          <img src="/images/who-we-are.jpg" alt="Who We Are" className="w-full h-96 object-cover" />
        </div>
        <div className="w-1/2 px-12">
          <h2 className="text-3xl font-bold text-gray-800 mb-6">Who We Are</h2>
          <p className="text-gray-600 text-lg leading-relaxed">
            A leading provider of sustainable agricultural solutions, committed to farmer success. 
            With decades of experience, we help farmers achieve optimal yields while protecting the environment.
          </p>
        </div>
      </div>

      {/* How We Do It Section */}
      <div className="flex items-center bg-white">
        <div className="w-1/2 px-12">
          <h2 className="text-3xl font-bold text-gray-800 mb-6">How We Do It</h2>
          <p className="text-gray-600 text-lg leading-relaxed">
            Advanced soil analysis and custom fertilizer formulation for optimal results. 
            Our mobile labs come to your farm, analyze your soil, and provide tailored recommendations within 10 days.
          </p>
        </div>
        <div className="w-1/2">
          <img src="/images/how-we-do-it.jpg" alt="How We Do It" className="w-full h-96 object-cover" />
        </div>
      </div>
    </div>
  </section>
);

export default Benefits;



==== C:\vs_code\ocp-bank-poc\src\components\home\CallToAction.tsx ====

import { useNavigate } from 'react-router-dom';

const CallToAction = () => {
  const navigate = useNavigate();

  return (
    <section className="bg-gray-50 py-16">
      <div className="max-w-7xl mx-auto px-4 text-center">
        <h2 className="text-3xl font-bold text-gray-900 mb-8">Ready to maximize your farm's potential?</h2>
        <button 
          onClick={() => navigate('/request-analysis')}
          className="bg-ocp text-white text-xl px-12 py-4 rounded-full hover:bg-ocp-dark transition-colors"
        >
          Start Your Analysis Today
        </button>
      </div>
    </section>
  );
};

export default CallToAction;



==== C:\vs_code\ocp-bank-poc\src\components\home\Hero.tsx ====

import React from 'react';
import { useNavigate } from 'react-router-dom';

const Hero: React.FC = () => {
  const navigate = useNavigate();

  return (
    <div className="relative w-full h-[800px]">
      {/* Background container */}
      <div className="absolute inset-0">
        <img
          src="/images/hero-bg.jpg"
          alt="Farm Background"
          className="w-full h-full object-cover"
        />
      </div>
      
      {/* Content container */}
      <div className="relative w-full h-full max-w-7xl mx-auto px-4">
        <div className="h-full flex flex-col items-center justify-center pt-16">
          {/* Cards container - positioned higher */}
          <div className="w-full grid grid-cols-3 gap-8 -mt-20">
            <div className="bg-white bg-opacity-95 rounded-xl p-8 transform hover:-translate-y-2 transition-transform shadow-lg">
              <div className="text-center space-y-2">
                <h2 className="text-xl font-medium text-gray-800">Increase your yield by</h2>
                <p className="text-4xl font-bold text-ocp">100,000 Baht</p>
                <p className="text-gray-600">per Acre</p>
              </div>
            </div>
            
            <div className="bg-white bg-opacity-95 rounded-xl p-8 transform hover:-translate-y-2 transition-transform shadow-lg">
              <div className="text-center space-y-2">
                <h2 className="text-xl font-medium text-gray-800">Support over</h2>
                <p className="text-4xl font-bold text-ocp">50 types</p>
                <p className="text-gray-600">of crops</p>
              </div>
            </div>
            
            <div className="bg-white bg-opacity-95 rounded-xl p-8 transform hover:-translate-y-2 transition-transform shadow-lg">
              <div className="text-center space-y-2">
                <h2 className="text-xl font-medium text-gray-800">Our Goal</h2>
                <p className="text-xl font-bold text-ocp">Carbon Neutral</p>
                <p className="text-gray-600 text-sm">100% Carbon Neutral by 2040</p>
              </div>
            </div>
          </div>
          
          {/* CTA container */}
          <div className="text-center space-y-4 mt-12">
            <button 
              onClick={() => navigate('/request-analysis')}
              className="bg-ocp text-white text-xl px-12 py-4 rounded-full hover:bg-ocp-dark transition-colors shadow-lg"
            >
              Request Analysis Now
            </button>
            <p className="text-lg text-white drop-shadow-md">Results arrive within 10 days</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Hero;



==== C:\vs_code\ocp-bank-poc\src\components\layout\Layout.tsx ====

import React from 'react';
import { Phone, Facebook } from 'lucide-react';

const LineIcon: React.FC = () => (
  <svg 
    viewBox="0 0 24 24" 
    className="h-5 w-5"
    fill="currentColor"
  >
    <path d="M24 10.314C24 4.943 18.615.001 12 .001S0 4.943 0 10.314c0 4.811 4.27 8.842 10.035 9.608.391.082.923.258 1.058.59.12.301.079.766.038 1.08l-.164 1.02c-.045.301-.24 1.186 1.049.645 1.291-.539 6.916-4.078 9.436-6.975C23.176 14.393 24 12.458 24 10.314zM19.365 9.863c.349 0 .63.285.63.631 0 .345-.281.63-.63.63H17.61v1.125h1.755c.349 0 .63.283.63.63 0 .344-.281.629-.63.629h-2.386c-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63h2.386c.346 0 .627.285.627.63 0 .349-.281.63-.63.63H17.61v1.125h1.755zm-3.855 3.016c0 .27-.174.51-.432.596-.064.021-.133.031-.199.031-.211 0-.391-.09-.51-.25l-2.443-3.322v2.945c0 .346-.279.629-.631.629-.346 0-.626-.283-.626-.629V8.108c0-.27.173-.51.43-.595.06-.023.136-.033.194-.033.195 0 .375.104.495.254l2.462 3.33V8.108c0-.345.282-.63.631-.63.345 0 .627.285.627.63v4.771h.002zm-5.791.016c0 .345-.282.63-.631.63-.345 0-.627-.285-.627-.63V8.108c0-.345.282-.63.63-.63.346 0 .628.285.628.63v4.771zm-2.466.63h-1.753v-4.77c0-.346-.283-.63-.631-.63-.345 0-.628.284-.628.63v4.77h-1.755c-.349 0-.63-.285-.63-.63V8.108c0-.345.281-.63.63-.63h4.767c.348 0 .629.285.629.63v4.771c0 .345-.282.63-.629.63z"/>
  </svg>
);

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => (
  <div className="overflow-y-scroll scrollbar-gutter-stable">
    <div className="min-h-screen flex flex-col">
      {/* Header */}
      <header className="sticky top-0 w-full bg-white shadow-sm z-50">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-8">
              <div className="w-32">
                <img 
                  src="https://www.ocpgroup.ma/themes/custom/ocp_child/img/logo.svg" 
                  alt="OCP Logo" 
                  className="h-12"
                />
              </div>
              <div className="flex items-center space-x-2 text-gray-600">
                <Phone className="h-4 w-4" />
                <span>+66 2 123 4567</span>
              </div>
            </div>

            <div className="flex items-center space-x-8">
              <div className="flex space-x-4">
                <Facebook className="h-5 w-5 text-gray-600 hover:text-ocp cursor-pointer" />
                <div className="text-gray-600 hover:text-ocp cursor-pointer">
                  <LineIcon />
                </div>
              </div>
              <nav className="flex space-x-6">
                <a href="#" className="text-gray-600 hover:text-ocp">Who we are</a>
                <a href="#" className="text-gray-600 hover:text-ocp">Contact Us</a>
              </nav>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow">
        {children}
      </main>

      {/* Footer */}
      <footer className="bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4">
          <div className="text-center text-gray-600 text-sm">
            © 2024 OCP Group. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  </div>
);

export default Layout;



==== C:\vs_code\ocp-bank-poc\src\components\SupabaseTest.tsx ====

import { useState } from 'react';
import { supabase } from '../services/supabase';

const SupabaseTest = () => {
  const [status, setStatus] = useState<string>('');

  const testConnection = async () => {
    try {
      const { data, error } = await supabase.from('test').select('*').limit(1);
      
      if (error) {
        setStatus(`Error: ${error.message}`);
        return;
      }
      
      setStatus('Successfully connected to Supabase!');
      console.log('Test data:', data);
    } catch (error) {
      setStatus(`Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Supabase Connection Test</h1>
      <button
        onClick={testConnection}
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
      >
        Test Connection
      </button>
      {status && (
        <div className="mt-4 p-4 border rounded">
          <p>{status}</p>
        </div>
      )}
    </div>
  );
};

export default SupabaseTest;



==== C:\vs_code\ocp-bank-poc\src\components\ui\alert.tsx ====

import * as React from "react"
import { cn } from "../../lib/utils"

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(
      "relative w-full rounded-lg border p-4",
      className
    )}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertDescription }



==== C:\vs_code\ocp-bank-poc\src\components\ui\button.tsx ====

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "../../lib/utils"
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(
          "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
          "bg-primary text-primary-foreground hover:bg-primary/90",
          "h-10 px-4 py-2",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button }



==== C:\vs_code\ocp-bank-poc\src\components\ui\card.tsx ====

import * as React from "react"
import { cn } from "../../lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm relative overflow-hidden",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div 
    ref={ref} 
    className={cn("p-6 pt-0 relative", className)} 
    {...props} 
  />
))
CardContent.displayName = "CardContent"

export { Card, CardHeader, CardTitle, CardContent }



==== C:\vs_code\ocp-bank-poc\src\components\ui\input.tsx ====

import * as React from "react"
import { cn } from "../..//lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



==== C:\vs_code\ocp-bank-poc\src\components\ui\label.tsx ====

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "../../lib/utils"

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



==== C:\vs_code\ocp-bank-poc\src\components\ui\select.tsx ====

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const Select = SelectPrimitive.Root

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className="h-4 w-4 opacity-50" />
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80",
        position === "popper" && "translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectValue = SelectPrimitive.Value

export {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
}



==== C:\vs_code\ocp-bank-poc\src\constants\config.ts ====





==== C:\vs_code\ocp-bank-poc\src\hooks\useSoilAnalysis.ts ====

import { useState, useEffect } from 'react';
import { SoilAnalysisRequest } from '../types/analysis'
import { SoilAnalysisService, setupRequestSubscription } from '../services/supabase'

export function useSoilAnalysis(email?: string) {
  const [requests, setRequests] = useState<(SoilAnalysisRequest & { id: string })[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!email) return;

    const fetchRequests = async () => {
      try {
        const data = await SoilAnalysisService.getRequestsByEmail(email);
        setRequests(data);
      } catch (err) {
        setError('Failed to fetch soil analysis requests');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchRequests();

    // Set up real-time subscription
    const unsubscribe = setupRequestSubscription(email, (updatedRequest) => {
      setRequests((prev) => {
        const index = prev.findIndex((r) => r.id === updatedRequest.id);
        if (index === -1) {
          return [...prev, updatedRequest];
        }
        const newRequests = [...prev];
        newRequests[index] = updatedRequest;
        return newRequests;
      });
    });

    return () => {
      unsubscribe();
    };
  }, [email]);

  const submitRequest = async (request: Omit<SoilAnalysisRequest, 'status' | 'createdAt'>) => {
    try {
      const newRequest = await SoilAnalysisService.createRequest(request);
      setRequests((prev) => [...prev, newRequest]);
      return newRequest;
    } catch (err) {
      setError('Failed to submit soil analysis request');
      throw err;
    }
  };

  return {
    requests,
    loading,
    error,
    submitRequest
  };
}



==== C:\vs_code\ocp-bank-poc\src\index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
    :root {
      --background: 0 0% 100%;
      --foreground: 222.2 84% 4.9%;
  
      --card: 0 0% 100%;
      --card-foreground: 222.2 84% 4.9%;
   
      --popover: 0 0% 100%;
      --popover-foreground: 222.2 84% 4.9%;
   
      --primary: 222.2 47.4% 11.2%;
      --primary-foreground: 210 40% 98%;
   
      --secondary: 210 40% 96.1%;
      --secondary-foreground: 222.2 47.4% 11.2%;
   
      --muted: 210 40% 96.1%;
      --muted-foreground: 215.4 16.3% 46.9%;
   
      --accent: 210 40% 96.1%;
      --accent-foreground: 222.2 47.4% 11.2%;
   
      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 210 40% 98%;
  
      --border: 214.3 31.8% 91.4%;
      --input: 214.3 31.8% 91.4%;
      --ring: 222.2 84% 4.9%;
   
      --radius: 0.5rem;
    }
  }





==== C:\vs_code\ocp-bank-poc\src\lib\utils.ts ====

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



==== C:\vs_code\ocp-bank-poc\src\main.tsx ====

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



==== C:\vs_code\ocp-bank-poc\src\pages\Home.tsx ====

import Hero from '../components/home/Hero';
import Benefits from '../components/home/Benefits';
import CallToAction from '../components/home/CallToAction';

const Home = () => (
  <>
    <Hero />
    <Benefits />
    <CallToAction />
  </>
);

export default Home;



==== C:\vs_code\ocp-bank-poc\src\pages\RequestAnalysis.tsx ====

import React from 'react';
import SoilAnalysisForm from '../components/forms/SoilAnalysisForm';

const RequestAnalysis: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 pt-32 pb-12">
      <div className="max-w-7xl mx-auto px-4">
        {/* Page Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Request a Soil Analysis
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Get personalized fertilizer recommendations based on your soil's unique composition.
            Our mobile lab will visit your farm to collect samples.
          </p>
        </div>

        {/* Form Section */}
        <div className="max-w-2xl mx-auto">
          <SoilAnalysisForm />
        </div>

        {/* Additional Information */}
        <div className="mt-12 text-center text-gray-600">
          <p>
            Need help? Contact our support team at{' '}
            <a href="tel:+66123456789" className="text-ocp hover:text-ocp-dark">
              +66 12 345 6789
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RequestAnalysis;



==== C:\vs_code\ocp-bank-poc\src\pages\RequestSuccess.tsx ====

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { useLocation, useNavigate } from 'react-router-dom';
import { CheckCircle } from 'lucide-react';

const AnalysisConfirmation = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const formData = location.state?.formData;

  // Redirect if no form data
  React.useEffect(() => {
    if (!formData) {
      navigate('/request-analysis');
    }
  }, [formData, navigate]);

  if (!formData) return null;

  const formatDate = (date: any) => {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="min-h-screen bg-gray-50 pt-16 pb-12">
      <div className="max-w-3xl mx-auto px-4">
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <CheckCircle className="h-16 w-16 text-green-500" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Soil Analysis Request Confirmed!
          </h1>
          <p className="text-gray-600">
            We have sent a confirmation email to {formData.email} with these details.
          </p>
        </div>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Request Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="border rounded-lg overflow-hidden">
              <table className="w-full">
                <tbody className="divide-y">
                  <tr className="bg-gray-50">
                    <td className="px-4 py-3 font-medium text-gray-900">Farmer Name</td>
                    <td className="px-4 py-3 text-gray-700">{formData.farmerName}</td>
                  </tr>
                  <tr>
                    <td className="px-4 py-3 font-medium text-gray-900">Crop Type</td>
                    <td className="px-4 py-3 text-gray-700 capitalize">{formData.cropType}</td>
                  </tr>
                  <tr className="bg-gray-50">
                    <td className="px-4 py-3 font-medium text-gray-900">Farm Address</td>
                    <td className="px-4 py-3 text-gray-700">{formData.farmAddress}</td>
                  </tr>
                  <tr>
                    <td className="px-4 py-3 font-medium text-gray-900">Contact Number</td>
                    <td className="px-4 py-3 text-gray-700">{formData.phoneNumber}</td>
                  </tr>
                  <tr className="bg-gray-50">
                    <td className="px-4 py-3 font-medium text-gray-900">Email</td>
                    <td className="px-4 py-3 text-gray-700">{formData.email}</td>
                  </tr>
                  <tr>
                    <td className="px-4 py-3 font-medium text-gray-900">Acreage</td>
                    <td className="px-4 py-3 text-gray-700">{formData.acreage} acres</td>
                  </tr>
                  <tr className="bg-gray-50">
                    <td className="px-4 py-3 font-medium text-gray-900">Preferred Sampling Date</td>
                    <td className="px-4 py-3 text-gray-700">{formatDate(formData.preferredSamplingDate)}</td>
                  </tr>
                  {formData.notes && (
                    <tr>
                      <td className="px-4 py-3 font-medium text-gray-900">Additional Notes</td>
                      <td className="px-4 py-3 text-gray-700">{formData.notes}</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>

        <div className="flex justify-center">
          <Button
            onClick={() => navigate('/')}
            className="px-8"
          >
            Return to Homepage
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AnalysisConfirmation;



==== C:\vs_code\ocp-bank-poc\src\services\mockApi.ts ====





==== C:\vs_code\ocp-bank-poc\src\services\supabase.ts ====


import { createClient } from '@supabase/supabase-js';
import { SoilAnalysisRequest } from '../types/analysis';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || '';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export class SoilAnalysisService {
  // Create a new soil analysis request
  static async createRequest(request: Omit<SoilAnalysisRequest, 'status' | 'createdAt'>) {
    const { data, error } = await supabase
      .from('soil_analysis_requests')
      .insert([
        {
          crop_type: request.cropType,
          farmer_name: request.farmerName,
          farm_address: request.farmAddress,
          phone_number: request.phoneNumber,
          email: request.email,
          acreage: request.acreage,
          preferred_sampling_date: request.preferredSamplingDate.toISOString(),
          notes: request.notes,
          status: 'pending'
        }
      ])
      .select()
      .single();

    if (error) {
      console.log('whatwhat');
      console.error('Error creating soil analysis request:', error);
      throw new Error('Failed to create soil analysis request');
    }

    return SoilAnalysisService.transformRowToRequest(data);
  }

  // Get all requests for a specific email
  static async getRequestsByEmail(email: string) {
    const { data, error } = await supabase
      .from('soil_analysis_requests')
      .select('*')
      .eq('email', email)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching requests:', error);
      throw new Error('Failed to fetch soil analysis requests');
    }

    return data.map(row => SoilAnalysisService.transformRowToRequest(row));
  }

  // Get a single request by ID
  static async getRequestById(id: string) {
    const { data, error } = await supabase
      .from('soil_analysis_requests')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('Error fetching request:', error);
      throw new Error('Failed to fetch soil analysis request');
    }

    return SoilAnalysisService.transformRowToRequest(data);
  }

  // Update request status
  static async updateRequestStatus(id: string, status: SoilAnalysisRequest['status']) {
    const { data, error } = await supabase
      .from('soil_analysis_requests')
      .update({ status })
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('Error updating request status:', error);
      throw new Error('Failed to update request status');
    }

    return SoilAnalysisService.transformRowToRequest(data);
  }

  // Helper function to transform database row to our TypeScript type
  public static transformRowToRequest(row: any): SoilAnalysisRequest & { id: string } {
    return {
      id: row.id,
      cropType: row.crop_type,
      farmerName: row.farmer_name,
      farmAddress: row.farm_address,
      phoneNumber: row.phone_number,
      email: row.email,
      acreage: row.acreage,
      preferredSamplingDate: new Date(row.preferred_sampling_date),
      notes: row.notes,
      status: row.status,
      createdAt: new Date(row.created_at)
    };
  }
}

// Real-time subscription setup
export const setupRequestSubscription = (
  email: string,
  onUpdate: (request: SoilAnalysisRequest & { id: string }) => void
) => {
  const subscription = supabase
    .channel('soil_analysis_changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'soil_analysis_requests',
        filter: `email=eq.${email}`
      },
      async (payload) => {
        if (payload.new) {
          const transformedRequest = SoilAnalysisService.transformRowToRequest(
            payload.new
          );
          onUpdate(transformedRequest);
        }
      }
    )
    .subscribe();

  return () => {
    supabase.removeChannel(subscription);
  };
};



==== C:\vs_code\ocp-bank-poc\src\styles\globals.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    @apply antialiased;
  }
  
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn-primary {
    @apply px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 
           transition-colors duration-200 font-medium focus:outline-none 
           focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }
  
  .input-field {
    @apply w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 
           focus:ring-primary-500;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
}




==== C:\vs_code\ocp-bank-poc\src\types\analysis.ts ====

export type CropType = 'corn' | 'wheat' | 'soybeans' | 'cotton' | 'rice';

export interface SoilAnalysisRequest {
  cropType: CropType;
  farmerName: string;
  farmAddress: string;
  phoneNumber: string;
  email: string;
  acreage: number;
  preferredSamplingDate: Date;
  notes?: string;
  status: 'pending' | 'scheduled' | 'completed';
  createdAt: Date;
}

export interface SoilAnalysisRow {
  id: string;
  crop_type: CropType;
  farmer_name: string;
  farm_address: string;
  phone_number: string;
  email: string;
  acreage: number;
  preferred_sampling_date: string;
  notes?: string;
  status: 'pending' | 'scheduled' | 'completed';
  created_at: string;
}



==== C:\vs_code\ocp-bank-poc\src\utils\dateUtils.ts ====





==== C:\vs_code\ocp-bank-poc\src\utils\validation.ts ====





==== C:\vs_code\ocp-bank-poc\src\vite-env.d.ts ====

/// <reference types="vite/client" />




==== C:\vs_code\ocp-bank-poc\vite.config.d.ts ====

declare const _default: import("vite").UserConfig;
export default _default;




==== C:\vs_code\ocp-bank-poc\vite.config.ts ====

// vite.config.ts

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: [
      { find: '@', replacement: path.resolve(__dirname, 'src') }
    ],
  },
})

