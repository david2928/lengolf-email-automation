Project Folder Structure:

C:\vs_code\lengolf-booking2\components\ui\alert-dialog.tsx
C:\vs_code\lengolf-booking2\components\ui\button.tsx
C:\vs_code\lengolf-booking2\components\ui\card.tsx
C:\vs_code\lengolf-booking2\components\ui\dialog.tsx
C:\vs_code\lengolf-booking2\lib\utils.ts
C:\vs_code\lengolf-booking2\next-env.d.ts
C:\vs_code\lengolf-booking2\next.config.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\callback\route.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\facebook\route.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\google\route.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\guest\route.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\line\route.ts
C:\vs_code\lengolf-booking2\src\app\api\auth\verify\route.ts
C:\vs_code\lengolf-booking2\src\app\api\bookings\available-slots\route.ts
C:\vs_code\lengolf-booking2\src\app\api\bookings\book-slot\route.ts
C:\vs_code\lengolf-booking2\src\app\api\bookings\my-bookings\route.ts
C:\vs_code\lengolf-booking2\src\app\book\page.tsx
C:\vs_code\lengolf-booking2\src\app\bookings\page.tsx
C:\vs_code\lengolf-booking2\src\app\globals.css
C:\vs_code\lengolf-booking2\src\app\layout.tsx
C:\vs_code\lengolf-booking2\src\app\loading.tsx
C:\vs_code\lengolf-booking2\src\app\page.tsx
C:\vs_code\lengolf-booking2\src\app\providers.tsx
C:\vs_code\lengolf-booking2\src\components\auth\callback\page.tsx
C:\vs_code\lengolf-booking2\src\components\auth\facebook-login.tsx
C:\vs_code\lengolf-booking2\src\components\auth\google-login.tsx
C:\vs_code\lengolf-booking2\src\components\auth\guest-login.tsx
C:\vs_code\lengolf-booking2\src\components\auth\line-login.tsx
C:\vs_code\lengolf-booking2\src\components\booking\booking-details.tsx
C:\vs_code\lengolf-booking2\src\components\booking\booking-form.tsx
C:\vs_code\lengolf-booking2\src\components\booking\confirmation.tsx
C:\vs_code\lengolf-booking2\src\components\booking\date-selector.tsx
C:\vs_code\lengolf-booking2\src\components\booking\time-slot-selector.tsx
C:\vs_code\lengolf-booking2\src\components\layout\footer.tsx
C:\vs_code\lengolf-booking2\src\components\layout\navbar.tsx
C:\vs_code\lengolf-booking2\src\components\ui\button.tsx
C:\vs_code\lengolf-booking2\src\components\ui\card.tsx
C:\vs_code\lengolf-booking2\src\components\ui\dialog.tsx
C:\vs_code\lengolf-booking2\src\components\ui\loading-spinner.tsx
C:\vs_code\lengolf-booking2\src\contexts\auth-context.tsx
C:\vs_code\lengolf-booking2\src\hooks\use-auth.ts
C:\vs_code\lengolf-booking2\src\lib\auth-service.ts
C:\vs_code\lengolf-booking2\src\lib\auth.ts
C:\vs_code\lengolf-booking2\src\lib\booking\index.ts
C:\vs_code\lengolf-booking2\src\lib\error-handler.ts
C:\vs_code\lengolf-booking2\src\lib\google-calendar.ts
C:\vs_code\lengolf-booking2\src\lib\index.ts
C:\vs_code\lengolf-booking2\src\lib\redis.ts
C:\vs_code\lengolf-booking2\src\lib\supabase-admin.ts
C:\vs_code\lengolf-booking2\src\lib\supabase.ts
C:\vs_code\lengolf-booking2\src\lib\utils.ts
C:\vs_code\lengolf-booking2\src\middleware.ts
C:\vs_code\lengolf-booking2\src\types\auth.ts
C:\vs_code\lengolf-booking2\src\types\database.types.ts
C:\vs_code\lengolf-booking2\src\types\google.d.ts
C:\vs_code\lengolf-booking2\src\types\index.ts
C:\vs_code\lengolf-booking2\src\types\supabase.ts
C:\vs_code\lengolf-booking2\src\utils\dates.ts
C:\vs_code\lengolf-booking2\src\utils\validation.ts
C:\vs_code\lengolf-booking2\tailwind.config.ts

==== File Contents ====



==== C:\vs_code\lengolf-booking2\components\ui\alert-dialog.tsx ====

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}




==== C:\vs_code\lengolf-booking2\components\ui\button.tsx ====

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }




==== C:\vs_code\lengolf-booking2\components\ui\card.tsx ====

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }




==== C:\vs_code\lengolf-booking2\components\ui\dialog.tsx ====

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}




==== C:\vs_code\lengolf-booking2\lib\utils.ts ====

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}




==== C:\vs_code\lengolf-booking2\next-env.d.ts ====

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.




==== C:\vs_code\lengolf-booking2\next.config.ts ====

/** @type {import('next').NextConfig} */
const nextConfig = {
  env: {
    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
    FACEBOOK_APP_ID: process.env.FACEBOOK_APP_ID,
    LINE_CLIENT_ID: process.env.LINE_CLIENT_ID,
    LINE_REDIRECT_URI: process.env.LINE_REDIRECT_URI,
  },
  images: {
    domains: ['www.len.golf'],
  },
}

module.exports = nextConfig



==== C:\vs_code\lengolf-booking2\src\app\api\auth\callback\route.ts ====

import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  try {
    const requestUrl = new URL(request.url);
    const code = requestUrl.searchParams.get('code');
    
    if (code) {
      const cookieStore = cookies();
      const supabase = createRouteHandlerClient({ cookies: () => cookieStore });
      
      await supabase.auth.exchangeCodeForSession(code);

      // Successful authentication, redirect to bookings page
      return NextResponse.redirect(new URL('/bookings', request.url));
    }

    // No code present, redirect to home with error
    return NextResponse.redirect(new URL('/?error=no-code', request.url));
  } catch (error) {
    console.error('Auth callback error:', error);
    return NextResponse.redirect(new URL('/?error=auth', request.url));
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\auth\facebook\route.ts ====

// src/app/api/auth/facebook/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { SignJWT } from 'jose';
import { supabaseAdmin } from '@/lib/supabase';
import { v4 as uuidv4 } from 'uuid';

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || '');

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { accessToken } = body;

    // Verify the access token with Facebook
    const response = await fetch(
      `https://graph.facebook.com/debug_token?input_token=${accessToken}&access_token=${process.env.FACEBOOK_APP_ID}|${process.env.FACEBOOK_APP_SECRET}`
    );

    const data = await response.json();
    if (!data.data?.is_valid) {
      throw new Error('Invalid Facebook token');
    }

    // Get user data from Facebook
    const userResponse = await fetch(
      `https://graph.facebook.com/me?fields=id,name,email&access_token=${accessToken}`
    );
    const userData = await userResponse.json();

    // Check if user exists
    let { data: existingUser } = await supabaseAdmin
      .from('users')
      .select()
      .eq('external_id', `facebook_${userData.id}`)
      .single();

    if (!existingUser) {
      // Create new user
      const userId = uuidv4();
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          id: userId,
          name: userData.name,
          email: userData.email || `${userData.id}@facebook.user`,
          phone_number: '',
          login_source: 'Facebook',
          external_id: `facebook_${userData.id}`,
          last_login: new Date().toISOString(),
        })
        .select()
        .single();

      if (insertError || !newUser) {
        throw new Error('Failed to create user');
      }

      existingUser = newUser;
    } else {
      // Update last login
      await supabaseAdmin
        .from('users')
        .update({ last_login: new Date().toISOString() })
        .eq('id', existingUser.id);
    }

    // Generate JWT
    const jwt = await new SignJWT({
      userId: existingUser.id,
      email: existingUser.email,
      name: existingUser.name,
      loginSource: 'Facebook' as const,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('24h')
      .sign(JWT_SECRET);

    return NextResponse.json({
      success: true,
      token: jwt,
      userId: existingUser.id,
      name: existingUser.name,
      email: existingUser.email,
      phoneNumber: existingUser.phone_number,
      loginSource: 'Facebook',
    });
  } catch (error) {
    console.error('Facebook auth error:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: error instanceof Error ? error.message : 'Authentication failed' 
      },
      { status: 401 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\auth\google\route.ts ====

import { NextRequest, NextResponse } from 'next/server';
import { OAuth2Client } from 'google-auth-library';
import { createClient } from '@supabase/supabase-js';
import { cookies } from 'next/headers';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { token } = body;

    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    if (!payload || !payload.email) {
      throw new Error('Invalid token payload');
    }

    const { email, name, sub: googleId } = payload;
    
    if (!googleId) {
      throw new Error('Google ID not found in token payload');
    }

    const external_id = `google_${googleId}`;

    // Check if user exists
    let { data: existingUser, error: fetchError } = await supabaseAdmin
      .from('users')
      .select()
      .eq('external_id', external_id)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is the error code for no rows returned
      throw fetchError;
    }

    let userId: string;

    if (!existingUser) {
      // Create auth user first
      const { data: authUser, error: createAuthError } = await supabaseAdmin.auth.admin.createUser({
        email: email,
        email_confirm: true,
        user_metadata: {
          name: name,
          avatar_url: payload.picture,
          provider: 'google',
        }
      });

      if (createAuthError) throw createAuthError;
      if (!authUser.user) throw new Error('Failed to create auth user');

      userId = authUser.user.id;

      // Create profile in users table
      const { error: createProfileError } = await supabaseAdmin
        .from('users')
        .insert({
          id: userId,
          email: email,
          name: name || email.split('@')[0],
          external_id: external_id,
          login_source: 'Google'
        });

      if (createProfileError) throw createProfileError;
    } else {
      userId = existingUser.id;
      
      // Update last login
      await supabaseAdmin
        .from('users')
        .update({ 
          last_login: new Date().toISOString(),
          name: name || existingUser.name
        })
        .eq('id', userId);
    }

    // Sign in the user
    const { data: signInData, error: signInError } = await supabaseAdmin.auth.signInWithIdToken({
      provider: 'google',
      token: token,
      nonce: 'NONCE' // You should generate and verify a nonce in production
    });

    if (signInError) throw signInError;
    if (!signInData.session) throw new Error('Failed to create session');

    // Set auth cookies
    const cookieStore = cookies();
    
    cookieStore.set('sb-access-token', signInData.session.access_token, {
      path: '/',
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7 // 1 week
    });

    if (signInData.session.refresh_token) {
      cookieStore.set('sb-refresh-token', signInData.session.refresh_token, {
        path: '/',
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 60 * 60 * 24 * 7 // 1 week
      });
    }

    return NextResponse.json({
      success: true,
      session: signInData.session,
      redirectUrl: '/bookings'
    });

  } catch (error) {
    console.error('Google auth error:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: error instanceof Error ? error.message : 'Authentication failed' 
      },
      { status: 401 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\auth\guest\route.ts ====

import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase-admin';

export async function POST(req: NextRequest) {
  try {
    const body = await req.json().catch(() => null);
    
    if (!body) {
      return NextResponse.json(
        { success: false, message: 'Invalid request body' },
        { status: 400 }
      );
    }

    const { name, email, phoneNumber } = body;

    // Validate required fields
    if (!name || !email || !phoneNumber) {
      return NextResponse.json(
        { success: false, message: 'Name, email, and phone number are required.' },
        { status: 400 }
      );
    }

    // Create unique email for auth system
    const timestamp = Date.now();
    const uniqueEmail = `guest.${timestamp}.${email}`;
    const guestExternalId = `guest_${timestamp}`;

    // Create the user in Supabase auth with unique email
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email: uniqueEmail,
      password: timestamp.toString(), // Create a random password
      email_confirm: true,
      user_metadata: {
        real_email: email,
        name,
        phone_number: phoneNumber,
        is_guest: true,
        guest_created_at: timestamp
      },
    });

    if (authError) {
      console.error('Error creating auth user:', authError);
      return NextResponse.json(
        { success: false, message: 'Failed to create user account.' },
        { status: 500 }
      );
    }

    if (!authData.user) {
      return NextResponse.json(
        { success: false, message: 'No user created.' },
        { status: 500 }
      );
    }

    // Create the user profile with real email
    const { data: newUser, error: insertError } = await supabaseAdmin
      .from('users')
      .insert({
        id: authData.user.id,
        email: email, // Store the real email
        name,
        phone_number: phoneNumber,
        login_source: 'Guest',
        external_id: guestExternalId
      })
      .select('*')
      .single();

    if (insertError) {
      console.error('Supabase insert error:', insertError);
      // Clean up the auth user if profile creation fails
      await supabaseAdmin.auth.admin.deleteUser(authData.user.id);
      return NextResponse.json(
        { success: false, message: 'Failed to create user profile.' },
        { status: 500 }
      );
    }

    // Sign in the user with the credentials
    const { data: signInData, error: signInError } = await supabaseAdmin.auth.signInWithPassword({
      email: uniqueEmail,
      password: timestamp.toString(),
    });

    if (signInError) {
      console.error('Error signing in:', signInError);
      return NextResponse.json(
        { success: false, message: 'Failed to create session.' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      token: signInData.session.access_token,
      userId: authData.user.id,
      email: email, // Return the real email
      name,
      phoneNumber,
      loginSource: 'Guest'
    });

  } catch (error) {
    console.error('Guest login error:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: error instanceof Error ? error.message : 'Internal server error' 
      },
      { status: 500 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\auth\line\route.ts ====

// src/app/api/auth/line/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { SignJWT } from 'jose';
import { supabaseAdmin } from '@/lib/supabase';
import { v4 as uuidv4 } from 'uuid';

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || '');

async function getLineToken(code: string) {
  const params = new URLSearchParams({
    grant_type: 'authorization_code',
    code,
    redirect_uri: process.env.LINE_REDIRECT_URI!,
    client_id: process.env.LINE_CLIENT_ID!,
    client_secret: process.env.LINE_CLIENT_SECRET!,
  });

  const response = await fetch('https://api.line.me/oauth2/v2.1/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: params.toString(),
  });

  return response.json();
}

async function getLineProfile(accessToken: string) {
  const response = await fetch('https://api.line.me/v2/profile', {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  });

  return response.json();
}

export async function POST(req: NextRequest) {
  try {
    const { code } = await req.json();

    const tokenData = await getLineToken(code);
    if (!tokenData.access_token) {
      throw new Error('Failed to get LINE access token');
    }

    const profile = await getLineProfile(tokenData.access_token);
    if (!profile.userId) {
      throw new Error('Failed to get LINE profile');
    }

    // Check if user exists
    let { data: existingUser } = await supabaseAdmin
      .from('users')
      .select()
      .eq('external_id', `line_${profile.userId}`)
      .single();

    if (!existingUser) {
      // Create new user
      const userId = uuidv4();
      const { data: newUser, error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          id: userId,
          name: profile.displayName,
          email: `${profile.userId}@line.user`,
          phone_number: '',
          login_source: 'LINE',
          external_id: `line_${profile.userId}`,
          last_login: new Date().toISOString(),
        })
        .select()
        .single();

      if (insertError || !newUser) {
        throw new Error('Failed to create user');
      }

      existingUser = newUser;
    } else {
      // Update last login
      await supabaseAdmin
        .from('users')
        .update({ last_login: new Date().toISOString() })
        .eq('id', existingUser.id);
    }

    // Generate JWT
    const jwt = await new SignJWT({
      userId: existingUser.id,
      email: existingUser.email,
      name: existingUser.name,
      loginSource: 'LINE' as const,
    })
      .setProtectedHeader({ alg: 'HS256' })
      .setIssuedAt()
      .setExpirationTime('24h')
      .sign(JWT_SECRET);

    return NextResponse.json({
      success: true,
      token: jwt,
      userId: existingUser.id,
      name: existingUser.name,
      email: existingUser.email,
      phoneNumber: existingUser.phone_number,
      loginSource: 'LINE',
    });
  } catch (error) {
    console.error('LINE auth error:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: error instanceof Error ? error.message : 'Authentication failed' 
      },
      { status: 401 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\auth\verify\route.ts ====

import { NextRequest, NextResponse } from 'next/server';
import { validateRequest } from '@/lib/auth';

export async function GET(req: NextRequest) {
  try {
    const payload = await validateRequest(req);
    
    if (!payload) {
      return NextResponse.json({ valid: false }, { status: 401 });
    }

    return NextResponse.json({ valid: true, user: payload });
  } catch (error) {
    console.error('Token verification error:', error);
    return NextResponse.json({ valid: false }, { status: 401 });
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\bookings\available-slots\route.ts ====

import { NextRequest, NextResponse } from 'next/server';
import { validateRequest } from '@/lib/auth';
import { DateTime } from 'luxon';
import { getRedis } from '@/lib/redis';
import { getAvailableStartTimes } from '@/lib/booking';

export async function GET(req: NextRequest) {
  try {
    // Validate authentication
    const payload = await validateRequest(req);
    if (!payload) {
      return NextResponse.json(
        { success: false, message: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Get date from query
    const url = new URL(req.url);
    const dateStr = url.searchParams.get('date');
    
    if (!dateStr) {
      return NextResponse.json(
        { success: false, message: 'Date parameter is required.' },
        { status: 400 }
      );
    }

    // Check Redis cache first
    const redis = getRedis();
    const cacheKey = `available_slots_${dateStr}`;
    const cachedSlots = await redis.get(cacheKey);

    if (cachedSlots) {
      return NextResponse.json({
        success: true,
        availableSlots: JSON.parse(cachedSlots)
      });
    }

    // If not in cache, calculate available slots
    const availableSlots = await getAvailableStartTimes(dateStr);

    // Cache the results for 10 minutes
    await redis.setex(cacheKey, 600, JSON.stringify(availableSlots));

    return NextResponse.json({
      success: true,
      availableSlots
    });
  } catch (error) {
    console.error('Error fetching available slots:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to fetch available slots' },
      { status: 500 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\api\bookings\book-slot\route.ts ====





==== C:\vs_code\lengolf-booking2\src\app\api\bookings\my-bookings\route.ts ====

import { NextRequest, NextResponse } from 'next/server';
import { validateRequest } from '@/lib/auth';
import { db } from '@/lib/firebase-admin';

export async function GET(req: NextRequest) {
  try {
    const payload = await validateRequest(req);
    
    if (!payload) {
      return NextResponse.json(
        { success: false, message: 'Unauthorized' },
        { status: 401 }
      );
    }

    const userId = payload.userId;

    // Query Firestore for user's bookings
    const bookingsSnapshot = await db
      .collection('bookings')
      .where('userId', '==', userId)
      .where('status', '==', 'active')
      .orderBy('date', 'desc')
      .orderBy('startTime', 'desc')
      .get();

    const bookings = bookingsSnapshot.docs.map(doc => ({
      bookingId: doc.id,
      ...doc.data(),
    }));

    return NextResponse.json({
      success: true,
      bookings,
    });
  } catch (error) {
    console.error('Error fetching bookings:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to fetch bookings' },
      { status: 500 }
    );
  }
}



==== C:\vs_code\lengolf-booking2\src\app\book\page.tsx ====

// src/app/book/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { format, addDays } from 'date-fns';
import { Calendar } from 'lucide-react';
import { Card } from '@/components/ui/card';

export default function BookPage() {
  const router = useRouter();
  const today = new Date();

  const dateOptions = [
    {
      label: 'Today',
      date: today,
      icon: <Calendar className="w-6 h-6" />,
    },
    {
      label: 'Tomorrow',
      date: addDays(today, 1),
      icon: <Calendar className="w-6 h-6" />,
    },
    {
      label: format(addDays(today, 2), 'EEEE'),
      date: addDays(today, 2),
      icon: <Calendar className="w-6 h-6" />,
    },
  ];

  const handleDateSelect = (date: Date) => {
    const formattedDate = format(date, 'yyyy-MM-dd');
    router.push(`/book/slots?date=${formattedDate}`);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-[#005a32] text-white p-4 mb-6">
          <h1 className="text-xl font-semibold">Step 1: Select Date</h1>
        </div>

        <p className="text-center mb-6">Choose a date to see available time slots.</p>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {dateOptions.map((option, index) => (
            <Card
              key={index}
              className="p-4 cursor-pointer hover:shadow-lg transition-shadow"
              onClick={() => handleDateSelect(option.date)}
            >
              <div className="text-center">
                {option.icon}
                <h3 className="font-semibold mt-2">{option.label}</h3>
                <p className="text-sm text-gray-600">
                  {format(option.date, 'dd/MM/yyyy')}
                </p>
              </div>
            </Card>
          ))}
          
          <Card
            className="p-4 cursor-pointer hover:shadow-lg transition-shadow"
            onClick={() => {
              // Implement custom date picker functionality
              // You can use a date picker library like react-datepicker
            }}
          >
            <div className="text-center">
              <Calendar className="w-6 h-6 mx-auto" />
              <h3 className="font-semibold mt-2">Select Date</h3>
              <p className="text-sm text-gray-600">Tap to select</p>
            </div>
          </Card>
        </div>

        <div className="mt-8">
          <img
            src="/images/lengolf_bay_rate.jpg"
            alt="Bay Rates"
            className="mx-auto max-w-full"
          />
        </div>
      </div>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\app\bookings\page.tsx ====

'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/auth-context';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CalendarIcon, Clock, Users } from 'lucide-react';
import { DateTime } from 'luxon';
import type { Booking } from '@/types';

export default function BookingsPage() {
  const { user } = useAuth();
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchBookings();
  }, []);

  const fetchBookings = async () => {
    try {
      const response = await fetch('/api/bookings/my-bookings', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch bookings');
      }

      const data = await response.json();
      if (data.success) {
        setBookings(data.bookings);
      } else {
        setError(data.message || 'Failed to load bookings');
      }
    } catch (err) {
      setError('Error loading bookings');
      console.error('Error:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[60vh]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center text-red-500">
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">My Bookings</h1>
        <Button variant="default" onClick={() => window.location.href = '/book'}>
          New Booking
        </Button>
      </div>

      {bookings.length === 0 ? (
        <Card>
          <CardContent className="text-center py-8">
            <p className="text-gray-500 mb-4">You don't have any bookings yet.</p>
            <Button onClick={() => window.location.href = '/book'}>
              Make Your First Booking
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {bookings.map((booking) => (
            <Card key={booking.bookingId}>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Bay {booking.bay}</span>
                  <span className="text-sm font-normal">
                    {booking.status === 'active' ? (
                      <span className="text-green-500">Active</span>
                    ) : (
                      <span className="text-red-500">Cancelled</span>
                    )}
                  </span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex items-center">
                    <CalendarIcon className="h-4 w-4 mr-2" />
                    {DateTime.fromISO(booking.date).toFormat('dd MMMM yyyy')}
                  </div>
                  <div className="flex items-center">
                    <Clock className="h-4 w-4 mr-2" />
                    {booking.startTime} ({booking.duration} hours)
                  </div>
                  <div className="flex items-center">
                    <Users className="h-4 w-4 mr-2" />
                    {booking.numberOfPeople} people
                  </div>
                  
                  {booking.status === 'active' && (
                    <div className="flex gap-2 mt-4">
                      <Button
                        variant="outline"
                        className="flex-1"
                        onClick={() => {/* Handle modify */}}
                      >
                        Modify
                      </Button>
                      <Button
                        variant="destructive"
                        className="flex-1"
                        onClick={() => {/* Handle cancel */}}
                      >
                        Cancel
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\app\globals.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 142.1 76.2% 36.3%;
    --primary-foreground: 355.7 100% 97.3%;
 
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
 
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
 
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 142.1 76.2% 36.3%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
 
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* LENGOLF Custom Styles */
.navbar {
  @apply bg-[#005a32] text-white;
}

.footer {
  @apply bg-[#f5fef9] text-gray-600 border-t border-[#005a32];
}

.footer-heading {
  @apply text-[#2b6f36] font-semibold;
}

.social-icon {
  @apply text-[#005a32] hover:text-[#2b6f36];
}

/* Button Styles */
.btn-primary {
  @apply bg-[#005a32] text-white hover:bg-[#004a29];
}

/* Card Styles */
.card-hover {
  @apply transition-shadow hover:shadow-lg;
}

/* Form Styles */
.form-input {
  @apply w-full p-2 border rounded focus:ring-2 focus:ring-[#005a32] focus:border-transparent;
}

.form-label {
  @apply block text-sm font-medium text-gray-700 mb-1;
}

/* Loading Spinner */
.loading-spinner {
  @apply animate-spin rounded-full border-4 border-[#005a32] border-t-transparent;
}

/* Add this to your globals.css */
@layer utilities {
  .container {
    @apply max-w-7xl mx-auto px-4;
  }
}



==== C:\vs_code\lengolf-booking2\src\app\layout.tsx ====

import './globals.css';
import { Inter } from 'next/font/google';
import { Providers } from './providers';
import { Navbar } from '@/components/layout/navbar';
import Script from 'next/script';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'LENGOLF Booking',
  description: 'Book your golf sessions at LENGOLF',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <Script
          src="https://accounts.google.com/gsi/client"
          strategy="beforeInteractive"
        />
        <link 
          rel="stylesheet" 
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" 
        />
      </head>
      <body className={inter.className}>
        <Providers>
          <Navbar />
          <main className="min-h-screen bg-gray-50 pt-16">
            {children}
          </main>
        </Providers>
      </body>
    </html>
  );
}



==== C:\vs_code\lengolf-booking2\src\app\loading.tsx ====

export default function Loading() {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    );
  }



==== C:\vs_code\lengolf-booking2\src\app\page.tsx ====

'use client';

import { useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAuth } from '@/hooks/use-auth';
import GoogleLogin from '@/components/auth/google-login';
import FacebookLogin from '@/components/auth/facebook-login';
import LineLogin from '@/components/auth/line-login';
import GuestLogin from '@/components/auth/guest-login';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function Home() {
  const { user, loading } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (!loading && user) {
      // Safely access searchParams and provide default route
      const returnUrl = searchParams?.get('from') || '/bookings';
      router.push(returnUrl);
    }
  }, [user, loading, router, searchParams]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
      </div>
    );
  }

  if (user) {
    return null; // Will redirect via useEffect
  }

  return (
    <div className="container max-w-md mx-auto px-4 py-8">
      <Card>
        <CardHeader>
          <CardTitle className="text-center">Welcome to LENGOLF!</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-center text-sm text-gray-600 mb-6">
            Please choose a login method to start booking your slot.
          </p>

          <div className="space-y-3">
            <div className="flex justify-center h-10 mb-4">
              <GoogleLogin />
            </div>
            
            <FacebookLogin />
            
            <LineLogin />
            
            <div className="relative py-3">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">Or</span>
              </div>
            </div>
            
            <GuestLogin />
          </div>

          {/* Error Message (if redirected with error) */}
          {searchParams?.get('error') && (
            <div className="mt-4 p-3 bg-red-50 text-red-600 rounded-md text-sm">
              There was an error during sign in. Please try again.
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\app\providers.tsx ====

// src/app/providers.tsx
'use client';

import { AuthProvider } from '@/contexts/auth-context';

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <AuthProvider>
      {children}
    </AuthProvider>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\auth\callback\page.tsx ====

'use client';

import { useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '@/lib/supabase';

export default function AuthCallback() {
  const router = useRouter();
  const searchParams = useSearchParams();

  useEffect(() => {
    const handleCallback = async () => {
      try {
        // Get the code from URL
        const code = searchParams?.get('code');
        
        if (!code) {
          console.error('No code found in URL');
          router.push('/?error=no-code');
          return;
        }

        // Exchange code for session
        const { error } = await supabase.auth.exchangeCodeForSession(code);

        if (error) {
          console.error('Error exchanging code for session:', error);
          router.push('/?error=auth');
          return;
        }

        // Get the return URL if it exists
        const returnTo = searchParams?.get('returnTo') || '/bookings';

        // Redirect to the success page
        router.push(returnTo);
      } catch (error) {
        console.error('Error in auth callback:', error);
        router.push('/?error=auth');
      }
    };

    handleCallback();
  }, [router, searchParams]);

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="flex flex-col items-center gap-4">
        <div className="w-8 h-8 border-t-2 border-b-2 border-gray-900 rounded-full animate-spin" />
        <p className="text-gray-600">Completing sign in...</p>
      </div>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\auth\facebook-login.tsx ====

// src/components/auth/facebook-login.tsx
'use client';

import { useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/use-auth';

declare global {
  interface Window {
    FB: {
      init: (config: any) => void;
      login: (callback: (response: any) => void, config: any) => void;
    };
  }
}

export default function FacebookLogin() {
  const { login } = useAuth();

  useEffect(() => {
    if (typeof window !== 'undefined' && !window.FB) {
      // Load Facebook SDK
      const script = document.createElement('script');
      script.src = 'https://connect.facebook.net/en_US/sdk.js';
      script.async = true;
      script.defer = true;
      script.crossOrigin = 'anonymous';
      document.body.appendChild(script);

      script.onload = () => {
        window.FB.init({
          appId: process.env.NEXT_PUBLIC_FACEBOOK_APP_ID,
          cookie: true,
          xfbml: true,
          version: 'v18.0'
        });
      };
    }
  }, []);

  const handleFacebookLogin = async () => {
    window.FB.login(async (response) => {
      if (response.authResponse) {
        try {
          const res = await fetch('/api/auth/facebook', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              accessToken: response.authResponse.accessToken 
            }),
          });

          const data = await res.json();

          if (data.success) {
            await login(data.token, {
              userId: data.userId,
              name: data.name,
              email: data.email,
              phoneNumber: data.phoneNumber,
              loginSource: 'Facebook',
            });
          } else {
            console.error('Facebook login failed:', data.message);
          }
        } catch (error) {
          console.error('Error during Facebook login:', error);
        }
      }
    }, { scope: 'public_profile,email' });
  };

  return (
    <Button
      onClick={handleFacebookLogin}
      className="w-full bg-[#1877F2] hover:bg-[#166FE5] text-white"
    >
      <i className="fab fa-facebook-f mr-2" />
      Login with Facebook
    </Button>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\auth\google-login.tsx ====

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';

declare global {
  interface Window {
    google: {
      accounts: {
        id: {
          initialize: (config: any) => void;
          renderButton: (parent: HTMLElement, config: any) => void;
          prompt: (callback?: any) => void;
        };
      };
    };
  }
}

export default function GoogleLogin() {
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const handleCredentialResponse = async (response: any) => {
    try {
      setIsLoading(true);
      
      const res = await fetch('/api/auth/google', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: response.credential,
        }),
      });

      const data = await res.json();

      if (data.success) {
        router.push(data.redirectUrl || '/bookings');
      } else {
        throw new Error(data.message || 'Login failed');
      }
    } catch (error) {
      console.error('Error during Google login:', error);
      router.push('/?error=auth');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (typeof window !== 'undefined' && window.google) {
      window.google.accounts.id.initialize({
        client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,
        callback: handleCredentialResponse,
      });

      const googleButtonDiv = document.getElementById('googleButton');
      if (googleButtonDiv) {
        window.google.accounts.id.renderButton(googleButtonDiv, {
          type: 'standard',
          size: 'large',
        });
      }
    }
  }, []);

  return (
    <div className="w-full">
      {isLoading ? (
        <Button disabled className="w-full h-12 bg-white text-gray-700 border border-gray-300">
          <div className="w-5 h-5 border-t-2 border-gray-700 border-solid rounded-full animate-spin mr-2" />
          Signing in...
        </Button>
      ) : (
        <div id="googleButton" className="w-full" />
      )}
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\auth\guest-login.tsx ====

// src/components/auth/guest-login.tsx
'use client';

import { useState, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/use-auth';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';

interface FormData {
  name: string;
  email: string;
  phoneNumber: string;
}

interface FormErrors {
  name?: string;
  email?: string;
  phoneNumber?: string;
  general?: string;
}

export default function GuestLogin() {
  const router = useRouter();
  const { login } = useAuth();
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    phoneNumber: '',
  });
  const [errors, setErrors] = useState<FormErrors>({});

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    let isValid = true;

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
      isValid = false;
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
      isValid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Invalid email format';
      isValid = false;
    }

    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'Phone number is required';
      isValid = false;
    } else if (!/^\+?[0-9\s\-()]{7,15}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Invalid phone number format';
      isValid = false;
    }

    setErrors(newErrors);
    return isValid;
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setErrors({});

    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch('/api/auth/guest', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({
          message: 'Failed to parse error response'
        }));
        throw new Error(errorData.message || 'Failed to login');
      }

      const data = await response.json();

      if (data?.success) {
        await login(data.token, {
          userId: data.userId,
          name: data.name,
          email: data.email,
          phoneNumber: data.phoneNumber,
          loginSource: 'Guest',
        });
        setIsOpen(false);
        router.push('/book');
      } else {
        throw new Error(data.message || 'Login failed');
      }
    } catch (error) {
      console.error('Guest login error:', error);
      setErrors({
        general: error instanceof Error ? error.message : 'An unexpected error occurred'
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="secondary" className="w-full">
          <i className="fas fa-user mr-2" />
          Continue as Guest
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Enter Your Details</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          {errors.general && (
            <div className="bg-red-50 text-red-500 p-3 rounded-md text-sm">
              {errors.general}
            </div>
          )}
          <div>
            <label className="block text-sm font-medium mb-1">Name</label>
            <input
              type="text"
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
            />
            {errors.name && (
              <p className="text-red-500 text-sm mt-1">{errors.name}</p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Email</label>
            <input
              type="email"
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.email}
              onChange={(e) =>
                setFormData({ ...formData, email: e.target.value })
              }
            />
            {errors.email && (
              <p className="text-red-500 text-sm mt-1">{errors.email}</p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Phone Number</label>
            <input
              type="tel"
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={formData.phoneNumber}
              onChange={(e) =>
                setFormData({ ...formData, phoneNumber: e.target.value })
              }
            />
            {errors.phoneNumber && (
              <p className="text-red-500 text-sm mt-1">{errors.phoneNumber}</p>
            )}
          </div>
          <Button
            type="submit"
            className="w-full"
            disabled={isLoading}
          >
            {isLoading ? (
              <span className="flex items-center justify-center">
                <i className="fas fa-spinner fa-spin mr-2" />
                Submitting...
              </span>
            ) : (
              'Submit'
            )}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\auth\line-login.tsx ====

// src/components/auth/line-login.tsx
'use client';

import { Button } from '@/components/ui/button';

export default function LineLogin() {
  const handleLineLogin = () => {
    const clientId = process.env.NEXT_PUBLIC_LINE_CLIENT_ID;
    const redirectUri = process.env.NEXT_PUBLIC_LINE_REDIRECT_URI;
    const state = generateRandomString(16);
    const scope = 'profile openid email';

    // Save state in localStorage to verify later
    localStorage.setItem('line_oauth_state', state);

    const authUrl = `https://access.line.me/oauth2/v2.1/authorize?` +
      `response_type=code` +
      `&client_id=${encodeURIComponent(clientId!)}` +
      `&redirect_uri=${encodeURIComponent(redirectUri!)}` +
      `&state=${encodeURIComponent(state)}` +
      `&scope=${encodeURIComponent(scope)}`;

    window.location.href = authUrl;
  };

  const generateRandomString = (length: number) => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  };

  return (
    <Button
      onClick={handleLineLogin}
      className="w-full bg-[#06C755] hover:bg-[#05B54C] text-white"
    >
      <i className="fab fa-line mr-2" />
      Login with LINE
    </Button>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\booking\booking-details.tsx ====

'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { DateTime } from 'luxon';
import { User } from '@/types';

interface BookingDetailsProps {
  selectedDate: string;
  selectedTime: string;
  maxDuration: number;
  onSubmit: (bookingData: any) => Promise<void>;
}

export default function BookingDetails({
  selectedDate,
  selectedTime,
  maxDuration,
  onSubmit
}: BookingDetailsProps) {
  const [formData, setFormData] = useState({
    phoneNumber: '',
    numberOfPeople: '',
    duration: '1'
  });
  const [endTime, setEndTime] = useState('--:--');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formValid, setFormValid] = useState(false);
  const [errors, setErrors] = useState({
    phoneNumber: '',
    numberOfPeople: '',
    duration: ''
  });

  useEffect(() => {
    // Prefill phone number from localStorage if available
    const savedPhone = localStorage.getItem('phoneNumber');
    if (savedPhone) {
      setFormData(prev => ({ ...prev, phoneNumber: savedPhone }));
    }
    calculateEndTime(1);
  }, []);

  useEffect(() => {
    validateForm();
  }, [formData]);

  const calculateEndTime = (duration: number) => {
    const start = DateTime.fromFormat(selectedTime, 'HH:mm', { zone: 'Asia/Bangkok' });
    if (!start.isValid) {
      setEndTime('--:--');
      return;
    }
    const end = start.plus({ hours: duration });
    setEndTime(end.toFormat('HH:mm'));
  };

  const validateForm = () => {
    const newErrors = {
      phoneNumber: '',
      numberOfPeople: '',
      duration: ''
    };
    let isValid = true;

    // Phone number validation
    const phoneRegex = /^\+?[0-9\s\-()]{7,15}$/;
    if (!formData.phoneNumber) {
      newErrors.phoneNumber = 'Please enter your phone number.';
      isValid = false;
    } else if (!phoneRegex.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Please enter a valid phone number.';
      isValid = false;
    }

    // Number of people validation
    if (!formData.numberOfPeople) {
      newErrors.numberOfPeople = 'Please select the number of people.';
      isValid = false;
    }

    // Duration validation
    if (!formData.duration) {
      newErrors.duration = 'Please select a duration.';
      isValid = false;
    }

    setErrors(newErrors);
    setFormValid(isValid);
  };

  const handleDurationChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const duration = parseInt(e.target.value);
    setFormData(prev => ({ ...prev, duration: e.target.value }));
    calculateEndTime(duration);
  };

  const handleSubmit = async () => {
    if (!formValid || isSubmitting) return;

    setIsSubmitting(true);
    try {
      const userId = localStorage.getItem('userId');
      const userName = localStorage.getItem('name');
      const email = localStorage.getItem('email');
      const loginMethod = localStorage.getItem('loginSource');

      const bookingData = {
        userId,
        userName,
        email,
        phoneNumber: formData.phoneNumber,
        numberOfPeople: parseInt(formData.numberOfPeople),
        date: selectedDate,
        startTime: selectedTime,
        duration: parseInt(formData.duration),
        loginMethod
      };

      await onSubmit(bookingData);
      localStorage.setItem('phoneNumber', formData.phoneNumber);
    } catch (error) {
      console.error('Error submitting booking:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto px-4">
      {/* Selected Date and Time Display */}
      <div className="grid md:grid-cols-2 gap-4 mb-6">
        <Card>
          <CardContent className="text-center p-4">
            <i className="fas fa-calendar-alt text-2xl mb-2"></i>
            <h5 className="text-lg font-semibold">Selected Date</h5>
            <p>{DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy')}</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="text-center p-4">
            <i className="fas fa-clock text-2xl mb-2"></i>
            <h5 className="text-lg font-semibold">Selected Time</h5>
            <p>{selectedTime}</p>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        {/* Duration Selection */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Select Duration (hours):
          </label>
          <select
            className="w-full p-2 border rounded"
            value={formData.duration}
            onChange={handleDurationChange}
          >
            {Array.from({ length: maxDuration }, (_, i) => i + 1).map(num => (
              <option key={num} value={num}>
                {num} hour{num > 1 ? 's' : ''}
              </option>
            ))}
          </select>
          {errors.duration && (
            <p className="text-red-500 text-sm mt-1">{errors.duration}</p>
          )}
        </div>

        {/* End Time Display */}
        <div>
          <label className="block text-sm font-medium mb-1">End Time:</label>
          <p className="text-lg font-semibold">{endTime}</p>
        </div>

        {/* Phone Number */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Phone Number:
          </label>
          <input
            type="tel"
            className="w-full p-2 border rounded"
            value={formData.phoneNumber}
            onChange={(e) => setFormData(prev => ({
              ...prev,
              phoneNumber: e.target.value
            }))}
            placeholder="Enter your phone number"
          />
          {errors.phoneNumber && (
            <p className="text-red-500 text-sm mt-1">{errors.phoneNumber}</p>
          )}
        </div>

        {/* Number of People */}
        <div>
          <label className="block text-sm font-medium mb-2">
            Number of People:
          </label>
          <div className="flex flex-wrap gap-2">
            {[1, 2, 3, 4, 5].map(num => (
              <Button
                key={num}
                type="button"
                variant={formData.numberOfPeople === num.toString() ? 'default' : 'outline'}
                className="w-12 h-12"
                onClick={() => setFormData(prev => ({
                  ...prev,
                  numberOfPeople: num.toString()
                }))}
              >
                {num}
              </Button>
            ))}
          </div>
          {errors.numberOfPeople && (
            <p className="text-red-500 text-sm mt-1">{errors.numberOfPeople}</p>
          )}
        </div>

        {/* Submit Button */}
        <Button
          className="w-full"
          disabled={!formValid || isSubmitting}
          onClick={handleSubmit}
        >
          {isSubmitting ? (
            <>
              <i className="fas fa-spinner fa-spin mr-2"></i>
              Confirming...
            </>
          ) : (
            <>
              <i className="fas fa-check-circle mr-2"></i>
              Confirm Booking
            </>
          )}
        </Button>
      </div>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\booking\booking-form.tsx ====





==== C:\vs_code\lengolf-booking2\src\components\booking\confirmation.tsx ====

'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { DateTime } from 'luxon';
import html2canvas from 'html2canvas';

interface BookingConfirmationProps {
  bookingDetails: {
    bay: string;
    date: string;
    startTime: string;
    duration: number;
    numberOfPeople: number;
    userName: string;
  };
  onBookAnother: () => void;
}

export default function BookingConfirmation({
  bookingDetails,
  onBookAnother
}: BookingConfirmationProps) {
  const endTime = DateTime
    .fromFormat(bookingDetails.startTime, 'HH:mm')
    .plus({ hours: bookingDetails.duration })
    .toFormat('HH:mm');

  const saveAsImage = async () => {
    const element = document.getElementById('confirmation-card');
    if (!element) return;

    try {
      const canvas = await html2canvas(element);
      const image = canvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.href = image;
      link.download = 'booking_confirmation.png';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error saving confirmation as image:', error);
      alert('Failed to save image. Please try again.');
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <Card id="confirmation-card" className="max-w-2xl mx-auto">
        <CardContent className="p-6">
          <div className="text-center mb-6">
            <i className="fas fa-check-circle text-green-500 text-4xl mb-4"></i>
            <h3 className="text-2xl font-bold">Booking Confirmed!</h3>
            <p className="text-gray-600">
              Thank you, <strong>{bookingDetails.userName}</strong>, for your booking.
            </p>
          </div>

          <table className="w-full border-collapse border">
            <tbody>
              <tr>
                <th className="border p-3 bg-gray-50 text-left">Bay</th>
                <td className="border p-3">{bookingDetails.bay}</td>
              </tr>
              <tr>
                <th className="border p-3 bg-gray-50 text-left">Date</th>
                <td className="border p-3">
                  {DateTime.fromISO(bookingDetails.date).toFormat('dd/MM/yyyy')}
                </td>
              </tr>
              <tr>
                <th className="border p-3 bg-gray-50 text-left">Time</th>
                <td className="border p-3">
                  {bookingDetails.startTime} - {endTime}
                </td>
              </tr>
              <tr>
                <th className="border p-3 bg-gray-50 text-left">Duration</th>
                <td className="border p-3">{bookingDetails.duration} hour(s)</td>
              </tr>
              <tr>
                <th className="border p-3 bg-gray-50 text-left">Number of People</th>
                <td className="border p-3">{bookingDetails.numberOfPeople}</td>
              </tr>
            </tbody>
          </table>

          <div className="flex flex-col sm:flex-row justify-center gap-4 mt-6">
            <Button onClick={onBookAnother}>
              <i className="fas fa-calendar-plus mr-2"></i>
              Book Another Slot
            </Button>
            <Button variant="outline" onClick={saveAsImage}>
              <i className="fas fa-download mr-2"></i>
              Save as Image
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\booking\date-selector.tsx ====

'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { DateTime } from 'luxon';
import Image from 'next/image';
import Flatpickr from 'react-flatpickr';
import 'flatpickr/dist/themes/light.css';

interface DateOption {
  label: string;
  date: DateTime;
  offset: number;
}

interface DateSelectorProps {
  onDateSelect: (date: string) => void;
}

export default function DateSelector({ onDateSelect }: DateSelectorProps) {
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [showRates, setShowRates] = useState(false);
  const today = DateTime.now().setZone('Asia/Bangkok');

  // Generate predefined date options
  const dateOptions: DateOption[] = [
    { label: 'Today', date: today, offset: 0 },
    { label: 'Tomorrow', date: today.plus({ days: 1 }), offset: 1 },
    { 
      label: today.plus({ days: 2 }).toFormat('cccc'), 
      date: today.plus({ days: 2 }), 
      offset: 2 
    }
  ];

  const handleDateSelect = (date: DateTime, option?: DateOption) => {
    const dateStr = date.toISODate() || '';
    setSelectedDate(dateStr);
    onDateSelect(dateStr);
  };

  const handleCustomDateSelect = (dates: Date[]) => {
    if (dates.length > 0) {
      const selectedDate = DateTime.fromJSDate(dates[0]);
      handleDateSelect(selectedDate);
    }
  };

  return (
    <div className="container mx-auto px-4">
      <p className="text-center mb-4">Choose a date to see available time slots.</p>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
        {dateOptions.map((option) => (
          <Card
            key={option.offset}
            className={`cursor-pointer transition-all hover:shadow-lg ${
              selectedDate === option.date.toISODate() 
                ? 'border-[#005a32] bg-[rgba(0,90,50,0.1)]' 
                : ''
            }`}
            onClick={() => handleDateSelect(option.date, option)}
          >
            <CardContent className="text-center p-4">
              <i className={`fas fa-${
                option.offset === 0 
                  ? 'calendar-day' 
                  : option.offset === 1 
                    ? 'calendar-check' 
                    : 'calendar-week'
              } text-2xl mb-2`}></i>
              <h5 className="text-lg font-semibold">{option.label}</h5>
              <p>{option.date.toFormat('dd/MM/yyyy')}</p>
            </CardContent>
          </Card>
        ))}

        {/* Custom Date Picker */}
        <Card className={`cursor-pointer transition-all hover:shadow-lg ${
          selectedDate && !dateOptions.find(o => o.date.toISODate() === selectedDate)
            ? 'border-[#005a32] bg-[rgba(0,90,50,0.1)]'
            : ''
        }`}>
          <CardContent className="text-center p-4">
            <i className="fas fa-calendar text-2xl mb-2"></i>
            <h5 className="text-lg font-semibold">Select Date</h5>
            <Flatpickr
              options={{
                minDate: 'today',
                dateFormat: 'Y-m-d',
                onChange: handleCustomDateSelect
              }}
              className="opacity-0 absolute inset-0 w-full h-full cursor-pointer"
            />
            <p>{selectedDate ? 
              DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy') : 
              'Tap to select'}</p>
          </CardContent>
        </Card>
      </div>

      {/* Bay Rates Section */}
      <div className="mt-6">
        {/* Desktop version */}
        <div className="hidden md:block">
          <Image
            src="/images/lengolf_bay_rate.jpg"
            alt="Bay Rates"
            width={800}
            height={400}
            className="mx-auto"
          />
        </div>

        {/* Mobile version */}
        <div className="md:hidden">
          <button
            className="btn btn-primary w-full mb-3"
            onClick={() => setShowRates(!showRates)}
          >
            {showRates ? 'Hide Rates' : 'Show Rates'}
          </button>
          {showRates && (
            <div className="text-center">
              <Image
                src="/images/lengolf_bay_rate.jpg"
                alt="Bay Rates"
                width={400}
                height={200}
                className="mx-auto"
              />
              <p className="text-muted small mt-1">Bay Rates are per hour</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\booking\time-slot-selector.tsx ====

'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Clock } from 'lucide-react';
import { TimeSlot } from '@/types';

interface TimeSlotSelectorProps {
  date: string;
  onTimeSlotSelect: (timeSlot: string, maxDuration: number) => void;
}

export default function TimeSlotSelector({ date, onTimeSlotSelect }: TimeSlotSelectorProps) {
  const [availableSlots, setAvailableSlots] = useState<TimeSlot[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchAvailableSlots();
  }, [date]);

  const fetchAvailableSlots = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/bookings/available-slots?date=${date}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch available slots');
      }

      const data = await response.json();
      if (data.success) {
        setAvailableSlots(data.availableSlots);
      } else {
        setError(data.message || 'Failed to load available slots');
      }
    } catch (err) {
      setError('Error loading available slots');
      console.error('Error:', err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="text-center my-8">
        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
        <p className="mt-4">Fetching available slots...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center my-8">
        <p className="text-red-500">{error}</p>
      </div>
    );
  }

  if (availableSlots.length === 0) {
    return (
      <div className="text-center my-8">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 inline-flex items-center">
          <i className="fas fa-calendar-times text-2xl text-yellow-500 mr-3"></i>
          <div>
            <p className="text-gray-700 mb-2">
              Oops! Looks like we&apos;re fully booked on this date.
            </p>
            <Button 
              variant="default" 
              onClick={() => window.history.back()}
              className="text-sm"
            >
              <i className="fas fa-arrow-left mr-2"></i>
              Pick Another Date
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {availableSlots.map((slot, index) => (
        <Card 
          key={`${slot.startTime}-${index}`}
          className="hover:shadow-lg transition-shadow duration-200"
        >
          <CardContent className="p-4">
            <div className="flex flex-col h-full">
              <div className="flex items-center mb-2">
                <Clock className="h-5 w-5 mr-2" />
                <h5 className="text-lg font-bold">{slot.startTime}</h5>
              </div>
              <p className="text-gray-600 mb-4">
                Available for up to {slot.maxDuration} hour(s)
              </p>
              <Button
                className="mt-auto w-full"
                onClick={() => onTimeSlotSelect(slot.startTime, slot.maxDuration)}
              >
                Select
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\layout\footer.tsx ====

import Image from 'next/image';
import Link from 'next/link';

export default function Footer() {
  return (
    <footer className="bg-[#f5fef9] text-gray-600 border-t border-[#005a32] mt-10">
      <div className="container mx-auto py-8 px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Logo and Address */}
          <div>
            <Link href="https://www.len.golf">
              <Image
                src="/images/logo_v1.png"
                alt="LENGOLF Logo"
                width={200}
                height={100}
                className="mb-4"
              />
            </Link>
            <Link 
              href="https://maps.app.goo.gl/M7ygv921XyzcQwBE8" 
              target="_blank"
              className="text-gray-600 hover:text-[#2b6f36] no-underline"
            >
              <p>
                The Mercury Ville @ BTS Chidlom<br />
                Floor 4
              </p>
            </Link>
          </div>

          {/* Opening Hours */}
          <div>
            <h5 className="text-[#2b6f36] font-semibold mb-4">Opening Hours</h5>
            <p>
              10am – 11pm<br />
              Monday – Sunday
            </p>
          </div>

          {/* Keep in Touch */}
          <div>
            <h5 className="text-[#2b6f36] font-semibold mb-4">Keep in Touch</h5>
            <p>
              <Link 
                href="https://www.len.golf" 
                className="text-gray-600 hover:text-[#2b6f36] no-underline"
              >
                www.len.golf
              </Link>
              <br />
              <span className="flex items-center gap-2">
                <i className="fas fa-phone-alt"></i>
                096-668-2335
              </span>
              <span className="flex items-center gap-2">
                <i className="fas fa-envelope"></i>
                <Link 
                  href="mailto:info@len.golf"
                  className="text-gray-600 hover:text-[#2b6f36] no-underline"
                >
                  info@len.golf
                </Link>
              </span>
            </p>
          </div>

          {/* Social Media */}
          <div>
            <h5 className="text-[#2b6f36] font-semibold mb-4">Follow Us</h5>
            <div className="flex gap-4">
              <Link 
                href="https://www.facebook.com/lengolf.bkk" 
                target="_blank"
                aria-label="Facebook"
                className="text-[#005a32] hover:text-[#2b6f36]"
              >
                <i className="fab fa-facebook-f text-2xl"></i>
              </Link>
              <Link 
                href="https://lin.ee/uxQpIXn" 
                target="_blank"
                aria-label="LINE"
                className="text-[#005a32] hover:text-[#2b6f36]"
              >
                <i className="fab fa-line text-2xl"></i>
              </Link>
              <Link 
                href="https://www.instagram.com/lengolf.bkk/" 
                target="_blank"
                aria-label="Instagram"
                className="text-[#005a32] hover:text-[#2b6f36]"
              >
                <i className="fab fa-instagram text-2xl"></i>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\layout\navbar.tsx ====

// src/components/layout/navbar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useAuth } from '@/hooks/use-auth';

export function Navbar() {
  const { isAuthenticated, logout } = useAuth();
  const pathname = usePathname() || '';

  return (
    <nav className="fixed top-0 left-0 right-0 bg-[#005a32] text-white p-4 z-50">
      <div className="container mx-auto flex items-center justify-between">
        <Link href="/" className="text-xl font-bold">
          LENGOLF Booking
        </Link>
        
        {isAuthenticated && (
          <div className="flex items-center space-x-6">
            <Link 
              href="/bookings"
              className={`hover:text-gray-200 ${
                pathname === '/bookings' ? 'font-bold' : ''
              }`}
            >
              My Bookings
            </Link>
            <Link 
              href="/book"
              className={`hover:text-gray-200 ${
                pathname.startsWith('/book') ? 'font-bold' : ''
              }`}
            >
              Make a Booking
            </Link>
            <Link 
              href="/rates"
              className={`hover:text-gray-200 ${
                pathname === '/rates' ? 'font-bold text-gray-300' : 'text-gray-300'
              }`}
            >
              Bay Rates
            </Link>
            <Link 
              href="/promotions"
              className={`hover:text-gray-200 ${
                pathname === '/promotions' ? 'font-bold text-gray-300' : 'text-gray-300'
              }`}
            >
              Promotions
            </Link>
            <button
              onClick={() => logout()}
              className="hover:text-gray-200"
            >
              Logout
            </button>
          </div>
        )}
      </div>
    </nav>
  );
}



==== C:\vs_code\lengolf-booking2\src\components\ui\button.tsx ====

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }




==== C:\vs_code\lengolf-booking2\src\components\ui\card.tsx ====

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }




==== C:\vs_code\lengolf-booking2\src\components\ui\dialog.tsx ====

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}




==== C:\vs_code\lengolf-booking2\src\components\ui\loading-spinner.tsx ====





==== C:\vs_code\lengolf-booking2\src\contexts\auth-context.tsx ====

'use client';

import { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { User } from '@/types/auth';
import { supabase } from '@/lib/supabase';
import { getCurrentUser } from '@/lib/auth-service';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (token: string, user: User) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAuthenticated: false,
  login: async () => {},
  logout: async () => {},
});

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    // Check for existing session
    const initializeAuth = async () => {
      try {
        const currentUser = await getCurrentUser();
        if (currentUser) {
          setUser(currentUser);
        }
      } catch (error) {
        console.error('Error initializing auth:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN' && session) {
          const currentUser = await getCurrentUser();
          setUser(currentUser);
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          router.push('/');
        }
        setLoading(false);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, [router]);

  const login = async (token: string, userData: User) => {
    setUser(userData);
  };

  const logout = async () => {
    try {
      await supabase.auth.signOut();
      setUser(null);
      router.push('/');
    } catch (error) {
      console.error('Error during logout:', error);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        isAuthenticated: !!user,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};



==== C:\vs_code\lengolf-booking2\src\hooks\use-auth.ts ====

// src/hooks/use-auth.ts

import { create } from 'zustand';
import { User } from '@/types/auth';

interface AuthStore {
  user: User | null;
  token: string | null;
  loading: boolean;
  isAuthenticated: boolean;
  login: (token: string, user: User) => Promise<void>;
  logout: () => void;
}

export const useAuth = create<AuthStore>((set) => ({
  user: null,
  token: null,
  loading: true,
  isAuthenticated: false,
  login: async (token: string, user: User) => {
    try {
      localStorage.setItem('token', token);
      localStorage.setItem('user', JSON.stringify(user));

      // Track login event
      await fetch('/api/events/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          userId: user.userId,
          loginSource: user.loginSource,
        }),
      });

      set({ user, token, isAuthenticated: true });
    } catch (error) {
      console.error('Error during login:', error);
      throw error;
    }
  },
  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    set({ user: null, token: null, isAuthenticated: false });
  },
}));

// Initialize auth state from localStorage
if (typeof window !== 'undefined') {
  const token = localStorage.getItem('token');
  const storedUser = localStorage.getItem('user');
  
  if (token && storedUser) {
    try {
      const user = JSON.parse(storedUser);
      useAuth.setState({ 
        user, 
        token, 
        isAuthenticated: true,
        loading: false 
      });
    } catch (error) {
      console.error('Error restoring auth state:', error);
      localStorage.removeItem('token');
      localStorage.removeItem('user');
    }
  } else {
    useAuth.setState({ loading: false });
  }
}



==== C:\vs_code\lengolf-booking2\src\lib\auth-service.ts ====

import { supabase } from './supabase';
import { LoginSource, User } from '@/types/auth';
import { PostgrestError } from '@supabase/supabase-js';
import { Database } from '@/types/database.types';

type UserInsert = Database['public']['Tables']['users']['Insert'];

const logError = (context: string, error: unknown) => {
  console.log(`Logging error for context: ${context}`);
  console.log('Raw error:', error);

  try {
    const errorString = JSON.stringify(error, Object.getOwnPropertyNames(error));
    console.log('Stringified error:', errorString);
  } catch (e) {
    console.log('Could not stringify error');
  }

  if (error && typeof error === 'object' && 'code' in error) {
    const pgError = error as PostgrestError;
    console.log('Postgrest error details:', {
      code: pgError.code,
      message: pgError.message,
      details: pgError.details,
      hint: pgError.hint
    });
  }

  if (error instanceof Error) {
    console.log('Standard error details:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });
  }
};

const getLoginSource = (provider: string | undefined): LoginSource => {
  if (!provider) return 'Google';
  
  const providerMap: Record<string, LoginSource> = {
    'google': 'Google',
    'facebook': 'Facebook',
    'line': 'LINE',
    'guest': 'Guest'
  };

  return providerMap[provider.toLowerCase()] || 'Google';
};

export const getCurrentUser = async (): Promise<User | null> => {
  try {
    console.log('Starting getCurrentUser...');
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      logError('Session error', sessionError);
      return null;
    }

    if (!session?.user) {
      console.log('No session found');
      return null;
    }

    try {
      console.log('Attempting to fetch existing profile...');
      const { data: profile, error: profileError } = await supabase
        .from('users')
        .select('*')
        .eq('id', session.user.id)
        .single();

      if (profileError && profileError.code === 'PGRST116') {
        console.log('No existing profile found, creating new one...');

        const provider = session.user.app_metadata.provider;
        const providerUserId = session.user.app_metadata.provider_id;
        const externalId = provider ? `${provider}_${providerUserId}` : null;

        console.log('Provider details:', { provider, providerUserId, externalId });

        const insertData: UserInsert = {
          id: session.user.id,
          email: session.user.email || '',
          name: session.user.user_metadata?.full_name || 
                session.user.user_metadata?.name ||
                session.user.email?.split('@')[0] || 
                'User',
          login_source: getLoginSource(provider),
          phone_number: null,
          external_id: externalId,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        console.log('Preparing to insert data:', insertData);

        const { data: newProfile, error: createError } = await supabase
          .from('users')
          .insert([insertData])
          .select()
          .single();

        if (createError) {
          console.log('Profile creation failed with error:', createError);
          logError('Profile creation error', createError);
          return null;
        }

        if (!newProfile) {
          console.log('No profile returned after successful insert');
          return null;
        }

        console.log('Successfully created new profile:', newProfile);

        return {
          userId: session.user.id,
          email: newProfile.email,
          name: newProfile.name,
          phoneNumber: newProfile.phone_number || undefined,
          loginSource: newProfile.login_source,
        };
      }

      if (profileError) {
        logError('Profile fetch error', profileError);
        return null;
      }

      if (!profile) {
        console.log('No profile found but no error reported');
        return null;
      }

      console.log('Found existing profile:', profile);

      return {
        userId: session.user.id,
        email: profile.email,
        name: profile.name,
        phoneNumber: profile.phone_number || undefined,
        loginSource: profile.login_source,
      };
    } catch (dbError) {
      logError('Database operation error', dbError);
      return null;
    }
  } catch (error) {
    logError('Unexpected error in getCurrentUser', error);
    return null;
  }
};

export const signInWithGoogle = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
        queryParams: {
          access_type: 'offline',
          prompt: 'consent',
        },
        scopes: 'email profile',
      },
    });

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error signing in with Google:', error);
    throw error;
  }
};



==== C:\vs_code\lengolf-booking2\src\lib\auth.ts ====

// src/lib/auth.ts

import { jwtVerify, JWTPayload } from 'jose';
import { NextRequest } from 'next/server';

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET || '');

export interface AuthPayload extends JWTPayload {
  userId: string;
  email: string;
  name: string;
  loginSource: 'Google' | 'Facebook' | 'LINE' | 'Guest';
}

// Make sure to export the validateRequest function
export async function validateRequest(request: NextRequest): Promise<AuthPayload | null> {
  try {
    const token = request.headers.get('authorization')?.split(' ')[1];
    
    if (!token) {
      return null;
    }

    const { payload } = await jwtVerify(token, JWT_SECRET);
    return payload as AuthPayload;
  } catch (error) {
    console.error('Token validation error:', error);
    return null;
  }
}

export function getAuthToken(request: NextRequest): string | null {
  return request.headers.get('authorization')?.split(' ')[1] || null;
}

export async function verifyAuth(request: NextRequest): Promise<{
  isAuthenticated: boolean;
  payload?: AuthPayload;
}> {
  try {
    const payload = await validateRequest(request);
    return {
      isAuthenticated: !!payload,
      payload: payload || undefined,
    };
  } catch {
    return { isAuthenticated: false };
  }
}



==== C:\vs_code\lengolf-booking2\src\lib\booking\index.ts ====

import { DateTime } from 'luxon';
import { google } from 'googleapis';
import { getGoogleAuth } from '../google-calendar';
import type { TimeSlot } from '@/types';

const CALENDARS = {
  'Bay 1 (Bar)':
    'a6234ae4e57933edb48a264fff4c5d3d3653f7bedce12cfd9a707c6c0ff092e4@group.calendar.google.com',
  'Bay 2':
    '3a700346dd902abd4aa448ee63e184a62f05d38bb39cb19a8fc27116c6df3233@group.calendar.google.com',
  'Bay 3 (Entrance)':
    '092757d971c313c2986b43f4c8552382a7e273b183722a44a1c4e1a396568ca3@group.calendar.google.com',
};

interface BusyTime {
  start: DateTime;
  end: DateTime;
}

async function fetchBusyTimes(calendarId: string, dateStr: string): Promise<BusyTime[]> {
  const auth = await getGoogleAuth();
  const calendar = google.calendar({ version: 'v3', auth });
  
  const startOfDay = DateTime.fromISO(`${dateStr}T00:00:00`, { zone: 'Asia/Bangkok' }).toUTC().toISO();
  const endOfDay = DateTime.fromISO(`${dateStr}T23:59:59`, { zone: 'Asia/Bangkok' }).toUTC().toISO();

  try {
    const response = await calendar.freebusy.query({
      requestBody: {
        timeMin: startOfDay,
        timeMax: endOfDay,
        items: [{ id: calendarId }],
      },
    });

    const busy = response.data.calendars?.[calendarId]?.busy || [];
    return busy.map(event => ({
      start: DateTime.fromISO(event.start || '').setZone('Asia/Bangkok'),
      end: DateTime.fromISO(event.end || '').setZone('Asia/Bangkok'),
    }));
  } catch (error) {
    console.error(`Error fetching free/busy for calendar ${calendarId}:`, error);
    return [];
  }
}

export async function getAvailableStartTimes(dateStr: string): Promise<TimeSlot[]> {
  const openingHour = 10; // 10:00 AM
  const closingHour = 23; // 11:00 PM
  const maxDuration = 5;  // Maximum 5 hours

  // Fetch busy times for all bays
  const busyTimes: Record<string, BusyTime[]> = {};
  for (const [bayName, calendarId] of Object.entries(CALENDARS)) {
    busyTimes[bayName] = await fetchBusyTimes(calendarId, dateStr);
  }

  // Initialize availability map
  const availabilityMap: Record<string, Record<number, boolean>> = {};
  for (const bayName of Object.keys(CALENDARS)) {
    availabilityMap[bayName] = {};
    for (let hour = openingHour; hour < closingHour; hour++) {
      availabilityMap[bayName][hour] = true;
    }

    // Mark busy times
    busyTimes[bayName].forEach(event => {
      const startHour = event.start.hour;
      const endHour = event.end.hour;
      for (let hour = startHour; hour < endHour; hour++) {
        if (hour >= openingHour && hour < closingHour) {
          availabilityMap[bayName][hour] = false;
        }
      }
    });
  }

  // Check if selected date is today
  const now = DateTime.now().setZone('Asia/Bangkok');
  const isToday = now.toISODate() === dateStr;
  let earliestHour = openingHour;

  if (isToday) {
    earliestHour = now.hour + 1;
    if (now.minute > 0) {
      earliestHour += 1;
    }
    if (earliestHour >= closingHour) {
      return [];
    }
  }

  // Calculate available slots
  const availableSlots: TimeSlot[] = [];
  
  for (let startHour = earliestHour; startHour < closingHour; startHour++) {
    if (isToday && startHour < now.hour) {
      continue;
    }

    let slotMaxDuration = 0;

    for (let duration = 1; duration <= maxDuration; duration++) {
      const endHour = startHour + duration;
      if (endHour > closingHour) break;

      let isAvailable = false;

      // Check if any bay is available for the entire duration
      for (const bayName of Object.keys(availabilityMap)) {
        let bayAvailable = true;
        for (let hour = startHour; hour < endHour; hour++) {
          if (!availabilityMap[bayName][hour]) {
            bayAvailable = false;
            break;
          }
        }
        if (bayAvailable) {
          isAvailable = true;
          break;
        }
      }

      if (isAvailable) {
        slotMaxDuration = duration;
      } else {
        break;
      }
    }

    if (slotMaxDuration > 0) {
      availableSlots.push({
        startTime: `${startHour.toString().padStart(2, '0')}:00`,
        maxDuration: slotMaxDuration,
      });
    }
  }

  return availableSlots;
}

export async function assignBay(dateStr: string, startTime: string, duration: number) {
  // Implementation of bay assignment logic
  // This would check availability and assign a specific bay
  // Will implement if needed
}



==== C:\vs_code\lengolf-booking2\src\lib\error-handler.ts ====

export class AppError extends Error {
    constructor(
      public message: string,
      public statusCode: number = 500,
      public code?: string
    ) {
      super(message);
      this.name = 'AppError';
    }
  }
  
  interface ErrorResponse {
    message: string;
    statusCode: number;
    code?: string;
  }
  
  export function handleApiError(error: unknown): ErrorResponse {
    console.error('API Error:', error);
  
    if (error instanceof AppError) {
      return {
        message: error.message,
        statusCode: error.statusCode,
        code: error.code,
      };
    } else if (error instanceof Error) {
      return {
        message: error.message || 'An unexpected error occurred',
        statusCode: 500,
        code: (error as any).code,
      };
    } else {
      return {
        message: 'An unexpected error occurred',
        statusCode: 500,
      };
    }
  }
  



==== C:\vs_code\lengolf-booking2\src\lib\google-calendar.ts ====

import { google } from 'googleapis';
import { GoogleAuth } from 'google-auth-library';

let auth: GoogleAuth | null = null;

export async function getGoogleAuth() {
  if (!auth) {
    try {
      const credentials = JSON.parse(
        Buffer.from(process.env.SERVICE_ACCOUNT_KEY_BASE64 || '', 'base64').toString('utf-8')
      );

      auth = new GoogleAuth({
        credentials,
        scopes: [
          'https://www.googleapis.com/auth/calendar',
          'https://www.googleapis.com/auth/calendar.events',
        ],
      });

    } catch (error) {
      console.error('Failed to initialize Google Auth:', error);
      throw new Error('Failed to initialize Google Auth');
    }
  }

  return auth;
}

export async function getCalendarClient() {
  const auth = await getGoogleAuth();
  return google.calendar({ version: 'v3', auth });
}



==== C:\vs_code\lengolf-booking2\src\lib\index.ts ====

export * from './booking';
export * from './redis';
export * from './google-calendar';



==== C:\vs_code\lengolf-booking2\src\lib\redis.ts ====

import { Redis } from 'ioredis';
import { DateTime } from 'luxon';

let redis: Redis | null = null;

export function getRedis(): Redis {
  if (!redis) {
    redis = new Redis({
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
    });

    redis.on('error', (err) => {
      console.error('Redis Client Error:', err);
    });

    redis.on('connect', () => {
      console.info('Connected to Redis');
    });
  }

  return redis;
}

export async function cacheAvailableSlots(dateStr: string, slots: any[]) {
  const redis = getRedis();
  const cacheKey = `available_slots_${dateStr}`;
  await redis.setex(cacheKey, 600, JSON.stringify(slots)); // Cache for 10 minutes
}

export async function getCachedSlots(dateStr: string) {
  const redis = getRedis();
  const cacheKey = `available_slots_${dateStr}`;
  const cachedData = await redis.get(cacheKey);
  return cachedData ? JSON.parse(cachedData) : null;
}

export async function clearCache(pattern: string = '*') {
  const redis = getRedis();
  const keys = await redis.keys(pattern);
  if (keys.length > 0) {
    await redis.del(...keys);
  }
}



==== C:\vs_code\lengolf-booking2\src\lib\supabase-admin.ts ====

import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database.types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceRole = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceRole) {
  throw new Error('Missing Supabase admin credentials');
}

export const supabaseAdmin = createClient<Database>(
  supabaseUrl,
  supabaseServiceRole,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);



==== C:\vs_code\lengolf-booking2\src\lib\supabase.ts ====

import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database.types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(
  supabaseUrl,
  supabaseAnonKey
);



==== C:\vs_code\lengolf-booking2\src\lib\utils.ts ====

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



==== C:\vs_code\lengolf-booking2\src\middleware.ts ====

import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  try {
    const res = NextResponse.next();
    const supabase = createMiddlewareClient({ req: request, res });

    // Refresh session if exists
    await supabase.auth.getSession();

    // List of protected paths
    const protectedPaths = ['/bookings', '/book'];
    const isProtectedPath = protectedPaths.some(path => 
      request.nextUrl.pathname.startsWith(path)
    );

    // Allow auth callback paths
    const isAuthCallback = request.nextUrl.pathname.startsWith('/auth/callback');
    if (isAuthCallback) {
      return res;
    }

    // Check authentication for protected paths
    if (isProtectedPath) {
      const { data: { session } } = await supabase.auth.getSession();
      const token = request.headers.get('authorization')?.split(' ')[1];

      // Allow access if either Supabase session exists or valid JWT token is present
      if (!session && !token) {
        // Redirect to login page with return URL
        const redirectUrl = request.nextUrl.clone();
        redirectUrl.pathname = '/';
        redirectUrl.searchParams.set('from', request.nextUrl.pathname);
        return NextResponse.redirect(redirectUrl);
      }
    }

    return res;
  } catch (error) {
    console.error('Middleware error:', error);
    
    // In case of error, redirect to home page with error parameter
    const redirectUrl = new URL('/', request.url);
    redirectUrl.searchParams.set('error', 'auth');
    return NextResponse.redirect(redirectUrl);
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     * - api routes that don't require auth
     */
    '/((?!_next/static|_next/image|favicon.ico|public/|api/public/).*)',
  ],
};



==== C:\vs_code\lengolf-booking2\src\types\auth.ts ====

// src/types/auth.ts

export type LoginSource = 'Google' | 'Facebook' | 'LINE' | 'Guest';

export interface User {
  userId: string;
  name: string;
  email: string;
  phoneNumber?: string;
  loginSource: LoginSource;
}

export interface AuthResponse {
  success: boolean;
  token: string;
  userId: string;
  name: string;
  email: string;
  phoneNumber?: string;
  loginSource: LoginSource;
  message?: string;
}



==== C:\vs_code\lengolf-booking2\src\types\database.types.ts ====

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string
          email: string
          name: string
          phone_number: string | null
          login_source: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at: string | null
          updated_at: string | null
          external_id: string | null
        }
        Insert: {
          id: string
          email: string
          name: string
          phone_number?: string | null
          login_source: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at?: string | null
          updated_at?: string | null
          external_id?: string | null
        }
        Update: {
          id?: string
          email?: string
          name?: string
          phone_number?: string | null
          login_source?: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at?: string | null
          updated_at?: string | null
          external_id?: string | null
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
  }
}



==== C:\vs_code\lengolf-booking2\src\types\google.d.ts ====

// src/types/google.d.ts

interface CredentialResponse {
  credential: string;
  select_by: string;
}

interface Google {
  accounts: {
    id: {
      initialize: (config: {
        client_id: string;
        callback: (response: CredentialResponse) => void;
        auto_select?: boolean;
        cancel_on_tap_outside?: boolean;
      }) => void;
      renderButton: (
        parent: HTMLElement,
        options?: {
          theme?: 'outline' | 'filled_blue' | 'filled_black';
          size?: 'large' | 'medium' | 'small';
          type?: 'standard' | 'icon';
          shape?: 'rectangular' | 'pill' | 'circle' | 'square';
          width?: number;
          text?: string;
          logo_alignment?: 'left' | 'center';
        }
      ) => void;
      prompt: (
        momentListener?: (notification: {
          isNotDisplayed: () => boolean;
          isSkippedMoment: () => boolean;
          isDismissedMoment: () => boolean;
          getSkippedReason: () => string;
          getDismissedReason: () => string;
        }) => void
      ) => void;
    };
  };
}

declare global {
  interface Window {
    google?: Google;
  }
}



==== C:\vs_code\lengolf-booking2\src\types\index.ts ====

export interface User {
  userId: string;
  name: string;
  email: string;
  phoneNumber?: string | null;  // Updated to allow null
  loginSource: 'Google' | 'Facebook' | 'LINE' | 'Guest';
}

export interface Booking {
  bookingId: string;
  userId: string;
  userName: string;
  email: string;
  phoneNumber: string;
  numberOfPeople: number;
  date: string;
  startTime: string;
  duration: number;
  bay: string;
  status: 'active' | 'cancelled' | 'completed';
  createdAt: Date;
  updatedAt?: Date;
  cancelledAt?: Date;
}

export interface TimeSlot {
  startTime: string;
  maxDuration: number;
}



==== C:\vs_code\lengolf-booking2\src\types\supabase.ts ====

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string
          email: string
          name: string
          phone_number: string | null
          login_source: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at: string
          updated_at: string
          external_id: string | null
        }
        Insert: {
          id: string
          email: string
          name: string
          phone_number?: string | null
          login_source: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at?: string
          updated_at?: string
          external_id?: string | null
        }
        Update: {
          id?: string
          email?: string
          name?: string
          phone_number?: string | null
          login_source?: 'Google' | 'Facebook' | 'LINE' | 'Guest'
          created_at?: string
          updated_at?: string
          external_id?: string | null
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
  }
}



==== C:\vs_code\lengolf-booking2\src\utils\dates.ts ====





==== C:\vs_code\lengolf-booking2\src\utils\validation.ts ====





==== C:\vs_code\lengolf-booking2\tailwind.config.ts ====

import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

